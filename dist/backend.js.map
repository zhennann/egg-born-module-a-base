{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/model/function.js","webpack://backend/./backend/src/config/constants.js","webpack://backend/./backend/src/model/atomClass.js","webpack://backend/./backend/src/model/atomAction.js","webpack://backend/./backend/src/model/atom.js","webpack://backend/./backend/src/model/atomStar.js","webpack://backend/./backend/src/model/atomLabel.js","webpack://backend/./backend/src/model/atomLabelRef.js","webpack://backend/./backend/src/config/sql/procedure.js","webpack://backend/./backend/src/model/functionStar.js","webpack://backend/./backend/src/model/functionLocale.js","webpack://backend/./backend/src/model/role.js","webpack://backend/./backend/src/model/roleInc.js","webpack://backend/./backend/src/model/userRole.js","webpack://backend/./backend/src/model/roleRight.js","webpack://backend/./backend/src/model/roleRightRef.js","webpack://backend/./backend/src/model/roleFunction.js","webpack://backend/./backend/src/config/middleware/adapter/user.js","webpack://backend/./backend/src/model/user.js","webpack://backend/./backend/src/model/userAgent.js","webpack://backend/./backend/src/model/auth.js","webpack://backend/./backend/src/model/authProvider.js","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/base.js","webpack://backend/./backend/src/config/middleware/adapter/base.js","webpack://backend/external \"path\"","webpack://backend/external \"os\"","webpack://backend/./backend/src/config/middleware/adapter/atomClass.js","webpack://backend/./backend/src/config/middleware/adapter/atomAction.js","webpack://backend/./backend/src/config/middleware/adapter/atom.js","webpack://backend/./backend/src/config/middleware/adapter/function.js","webpack://backend/./backend/src/config/middleware/adapter/role.js","webpack://backend/./backend/src/config/middleware/adapter/util.js","webpack://backend/./backend/src/config/middleware/auth.js","webpack://backend/./backend/src/config/middleware/right.js","webpack://backend/./backend/src/config/middleware/jsonp.js","webpack://backend/./backend/src/config/middleware/httpLog.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/base.js","webpack://backend/./backend/src/controller/user.js","webpack://backend/./backend/src/controller/atom.js","webpack://backend/./backend/src/controller/atomClass.js","webpack://backend/./backend/src/controller/atomAction.js","webpack://backend/./backend/src/controller/function.js","webpack://backend/./backend/src/controller/auth.js","webpack://backend/./backend/src/controller/comment.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/version/update1.js","webpack://backend/./backend/src/service/version/update1Data.js","webpack://backend/./backend/src/service/version/update2.js","webpack://backend/./backend/src/service/version/update3.js","webpack://backend/./backend/src/service/version/update4.js","webpack://backend/./backend/src/service/version/update6.js","webpack://backend/./backend/src/service/version/init2.js","webpack://backend/./backend/src/service/version/initData2.js","webpack://backend/./backend/src/service/version/init4.js","webpack://backend/./backend/src/service/version/init5.js","webpack://backend/./backend/src/service/base.js","webpack://backend/./backend/src/service/user.js","webpack://backend/./backend/src/service/atom.js","webpack://backend/./backend/src/service/atomClass.js","webpack://backend/./backend/src/service/atomAction.js","webpack://backend/./backend/src/service/auth.js","webpack://backend/./backend/src/service/function.js","webpack://backend/./backend/src/service/comment.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/roleIncRef.js","webpack://backend/./backend/src/model/roleRef.js","webpack://backend/./backend/src/model/label.js","webpack://backend/./backend/src/model/comment.js","webpack://backend/./backend/src/model/commentView.js","webpack://backend/./backend/src/model/commentHeart.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/keywords.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":"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AY;AACZ;AACA,qCAAqC;AACrC,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,IAAI,oDAAoD;AAC/J;AACA;AACA;AACA,yDAAyD,UAAU,8EAA8E,IAAI,gFAAgF;AACrO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,IAAI,oDAAoD;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA,aAAa,oCAAoC;AACjD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,IAAI,kCAAkC,UAAU;AAC1G,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,6DAA6D,IAAI,kCAAkC,UAAU;AAC7G,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;;AAEA;AACA;AACA,cAAc;;AAEd,uBAAuB;AACvB,wCAAwC;AACxC;;AAEA;AACA;AACA;;AAEA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,IAAI,YAAY;AACzD;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,IAAI,oDAAoD;AAChK;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA,kHAAkH,IAAI,gFAAgF;AACtM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,IAAI,oDAAoD;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,6CAA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CA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA,qCAAqC,4BAA4B;AACjE;AACA,sDAAsD,wBAAwB;AAC9E,uCAAuC,0BAA0B;AACjE;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA,oDAAoD,wBAAwB;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;;AAEA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD,yCAAyC,0BAA0B;AACnE;AACA;;AAEA,iCAAiC,SAAS;AAC1C;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA,kEAAkE,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,yBAAyB;AAC7F,8CAA8C,oCAAoC;AAClF;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D,6CAA6C,0BAA0B;AACvE;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C,OAAO;AACP;;AAEA,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA,OAAO;AACP;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,OAAO;AACP;;AAEA,uBAAuB,cAAc;AACrC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,iCAAiC;AACtE;;AAEA,gBAAgB,iCAAiC;AACjD;AACA,iDAAiD,2BAA2B;AAC5E,oDAAoD,yBAAyB;AAC7E,0DAA0D,UAAU,sBAAsB,UAAU,oBAAoB,UAAU;AAClI,0EAA0E,8BAA8B;AACxG;AACA;AACA;AACA,YAAY;AACZ;AACA,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,cAAc;AACd;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC,+BAA+B,uBAAuB;AACtD;;AAEA,kBAAkB,SAAS;AAC3B,8CAA8C,SAAS;AACvD,+BAA+B,aAAa;AAC5C;;AAEA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,kBAAkB,+BAA+B;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA,qBAAqB,MAAM,IAAI,SAAS;AACxC;AACA,OAAO;AACP,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,2CAA2C;AACtE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,OAAO;AACP;;AAEA,gCAAgC,uBAAuB;AACvD;AACA,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA,sDAAsD,OAAO,GAAG,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3hBA;;AAEA;;AAEA;AACA,kBAAkB,2BAA2B,wBAAwB,EAAE;AACvE;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,gCAAgC,uBAAuB,EAAE;AAC3E;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,2BAA2B,uBAAuB,EAAE;AACtE;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,mCAAmC,uBAAuB,EAAE;AAC9E;;AAEA;;AAEA;AACA;;;;;;;ACXA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,EAAoB;AAC3C,oBAAoB,mBAAO,CAAC,EAAyB;AACrD,kBAAkB,mBAAO,CAAC,CAAuB;;AAEjD;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;;;;;;AC5GA;AACA,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA,aAAa,mBAAO,CAAC,EAAsB;AAC3C,aAAa,mBAAO,CAAC,EAAsB;AAC3C,cAAc,mBAAO,CAAC,EAAuB;AAC7C,cAAc,mBAAO,CAAC,EAAuB;AAC7C,gBAAgB,mBAAO,CAAC,EAAyB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA,eAAe,mBAAO,CAAC,EAAmB;AAC1C;;AAEA;AACA,oBAAoB,mBAAO,CAAC,EAAwB;AACpD;;AAEA;AACA,qBAAqB,mBAAO,CAAC,EAAyB;AACtD;;AAEA;AACA,eAAe,mBAAO,CAAC,EAAmB;AAC1C;;AAEA;AACA,mBAAmB,mBAAO,CAAC,EAAuB;AAClD;;AAEA;AACA,eAAe,mBAAO,CAAC,EAAmB;AAC1C;;AAEA;AACA,eAAe,mBAAO,CAAC,EAAmB;AAC1C;;AAEA;AACA,eAAe,mBAAO,CAAC,EAAmB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;AC/GA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,kBAAkB,mBAAO,CAAC,CAAoB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,cAAc,KAAK,UAAU;AACjE,gBAAgB,OAAO,EAAE,KAAK;AAC9B;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO,EAAE,gBAAgB,GAAG,KAAK;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA,oFAAoF,mBAAO,CAAC,EAAI;AAChG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB,+DAA+D,yCAAyC;AACxG;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,wBAAwB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,eAAe;AAC7B;AACA;AACA;;AAEA,wBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa,GAAG,aAAa;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,QAAQ,UAAU,QAAQ,eAAe,aAAa,iBAAiB,eAAe,qBAAqB,mBAAmB;AACzL;AACA;AACA;AACA,wDAAwD,QAAQ,iBAAiB,eAAe;AAChG;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACxdA,iC;;;;;;ACAA,+B;;;;;;ACAA,gBAAgB,mBAAO,CAAC,CAA6B;;AAErD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,mEAAmE;AACzG;;AAEA;AACA;AACA;AACA,oCAAoC,kCAAkC;AACtE;AACA;AACA;;AAEA,eAAe,mDAAmD;AAClE;AACA,yBAAyB,KAAK,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAA2C;AAC1D,OAAO;AACP;;AAEA,oBAAoB,2CAA2C;AAC/D;AACA,wCAAwC,2CAA2C;AACnF;AACA;AACA,iDAAiD,wBAAwB;AACzE,mDAAmD,OAAO,GAAG,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,SAAS;AACnC,gDAAgD,SAAS;AACzD;AACA;;AAEA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;ACpHA,gBAAgB,mBAAO,CAAC,CAA8B;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,wBAAwB;AACvC,yBAAyB,KAAK,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,OAAO;AACP;;AAEA,2BAA2B,qBAAqB;AAChD,iEAAiE,SAAS;AAC1E,2CAA2C,+EAA+E;AAC1H;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA,wCAAwC,oBAAoB;AAC5D;AACA,sDAAsD,kBAAkB;AACxE,2CAA2C,yEAAyE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC5DA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,oBAAoB,mBAAO,CAAC,CAAwB;AACpD,wBAAwB,mBAAO,CAAC,CAA4B;AAC5D,yBAAyB,mBAAO,CAAC,CAA6B;AAC9D,4BAA4B,mBAAO,CAAC,CAAgC;AACpE,uBAAuB,mBAAO,CAAC,CAAwB;;AAEvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B,+CAA+C;AACzE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,2BAA2B,kBAAkB,GAAG,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,wBAAwB;AAC5D;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;;AAEP,cAAc;AACd;;AAEA;AACA,gBAAgB,YAAY;AAC5B,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;;AAEA;AACA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAA4C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB,GAAG,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC,8DAA8D,qBAAqB;;AAEnF;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA,6BAA6B,kBAAkB;AAC/C;;AAEA,sBAAsB,kBAAkB;AACxC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA,kBAAkB,YAAY;AAC9B,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,wBAAwB;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA,kBAAkB,oBAAoB;AACtC,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,kBAAkB,aAAa,kBAAkB,QAAQ;AACzD,8CAA8C,iBAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;;AAEA,eAAe,SAAS;AACxB,uCAAuC,aAAa;AACpD;;AAEA,gBAAgB,aAAa,WAAW,QAAQ;AAChD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,gBAAgB,aAAa,WAAW,QAAQ;AAChD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,gBAAgB,aAAa,WAAW,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;;AAEA,qBAAqB,aAAa,gBAAgB,QAAQ;AAC1D;AACA;AACA;;AAEA,mBAAmB,aAAa,cAAc,QAAQ;AACtD;AACA;AACA;;AAEA,sBAAsB,aAAa,iBAAiB,QAAQ;AAC5D;AACA;AACA;;AAEA,kBAAkB,aAAa,gBAAgB,QAAQ;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ,sCAAsC,QAAQ;AACzG;AACA,SAAS;AACT,mDAAmD,QAAQ,sCAAsC,QAAQ;AACzG;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,0BAA0B;AAC5C,8CAA8C,kBAAkB;AAChE;AACA,qDAAqD,mEAAmE;AACxH;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,aAAa,KAAK,QAAQ;AAC/C,gDAAgD,KAAK;AACrD;AACA,6CAA6C,kBAAkB;AAC/D;;AAEA;;AAEA;AACA,kBAAkB,2CAA2C;AAC7D,aAAa,+CAA+C;AAC5D;AACA,KAAK;AACL;AACA,iEAAiE,mCAAmC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,aAAa,+CAA+C;AAC5D;AACA,KAAK;AACL,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,0BAA0B,aAAa;AACvC;AACA;;AAEA;AACA,aAAa,gBAAgB;AAC7B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iBAAiB,sBAAsB,kEAAkE,0BAA0B;AACnI;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA,aAAa,KAAK;AAClB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,KAAK;AAClB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA,KAAK;AACL,oEAAoE,2BAA2B;AAC/F;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA,KAAK;AACL,oEAAoE,2BAA2B;AAC/F;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,kBAAkB,mDAAmD;AACrE;AACA,KAAK;AACL,+CAA+C,2CAA2C;AAC1F;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;;AAEA;;AAEA;AACA;;;;;;;ACnlBA,gBAAgB,mBAAO,CAAC,CAA4B;AACpD,4BAA4B,mBAAO,CAAC,EAAgC;AACpE,8BAA8B,mBAAO,CAAC,EAAkC;AACxE,uBAAuB,mBAAO,CAAC,CAAwB;;AAEvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,WAAW,6CAA6C,QAAQ;AAChF,yCAAyC;;AAEzC;AACA,0CAA0C,SAAS;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA,mDAAmD,uBAAuB;AAC1E;AACA;AACA;AACA;;AAEA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA,iCAAiC,KAAK;AACtC,OAAO;AACP;AACA,iCAAiC,eAAe;AAChD;AACA;;AAEA,eAAe,mBAAmB;AAClC,2CAA2C,KAAK;AAChD;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,OAAO;AACP;;AAEA,oBAAoB,eAAe;AACnC;AACA;AACA,wCAAwC,eAAe;AACvD;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA,wDAAwD,4CAA4C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,eAAe;AAChC;AACA,KAAK;AACL,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,uBAAuB,SAAS;AAChC,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,OAAO;AACP;;AAEA,wBAAwB,SAAS;AACjC,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AClMA,gBAAgB,mBAAO,CAAC,EAAwB;AAChD,uBAAuB,mBAAO,CAAC,EAA2B;AAC1D,wBAAwB,mBAAO,CAAC,EAA4B;AAC5D,yBAAyB,mBAAO,CAAC,EAA6B;AAC9D,4BAA4B,mBAAO,CAAC,EAAgC;AACpE,wBAAwB,mBAAO,CAAC,CAA4B;AAC5D,4BAA4B,mBAAO,CAAC,EAAgC;;AAEpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,eAAe,oFAAoF;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA,gBAAgB,uBAAuB;AACvC;AACA,mCAAmC,aAAa;AAChD;;AAEA;AACA,+BAA+B,2BAA2B;;AAE1D;AACA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA,mCAAmC,aAAa;;AAEhD;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;;AAEA;AACA,sCAAsC,SAAS;AAC/C,sCAAsC,oBAAoB;;AAE1D;AACA,uCAAuC,SAAS;;AAEhD;AACA,wCAAwC,SAAS;AACjD,2CAA2C,SAAS;;AAEpD;AACA,2CAA2C,SAAS;;AAEpD;AACA,+BAA+B,aAAa;;AAE5C;AACA;AACA;;AAEA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,KAAK;AAC9B,sCAAsC,KAAK;;AAE3C;AACA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA,OAAO;AACP;AACA;;AAEA,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;;AAEA,8BAA8B,SAAS;AACvC,uCAAuC,SAAS;AAChD;;AAEA;AACA,wBAAwB,qCAAqC;AAC7D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qCAAqC,4BAA4B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,wDAAwD,kBAAkB;AAC1E;AACA;AACA;AACA,kBAAkB;AAClB;AACA,oDAAoD,sDAAsD;AAC1G;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,KAAK;AAChC,wCAAwC,KAAK;AAC7C,2CAA2C,kBAAkB;AAC7D,2CAA2C,kBAAkB;AAC7D;;AAEA;AACA,2BAA2B,sCAAsC;AACjE;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,8BAA8B,KAAK;AACnC,2CAA2C,KAAK;AAChD;;AAEA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gBAAgB,4BAA4B,EAAE;AAC9D,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;;AAEA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;;AAEA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;;AAEA;AACA,0BAA0B,qBAAqB;AAC/C;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA,YAAY;AACZ,wDAAwD;AACxD;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA,2GAA2G,6BAA6B;AACxI;AACA;AACA;AACA,YAAY;AACZ,wDAAwD;AACxD;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA,YAAY;AACZ;AACA,2DAA2D;AAC3D;AACA,cAAc;AACd;;AAEA;AACA;;AAEA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,sCAAsC,MAAM;AAC5C;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA,OAAO;AACP;AACA;AACA,yCAAyC,mCAAmC;AAC5E;AACA;AACA;AACA;;AAEA;AACA,UAAU,2CAA2C;AACrD,UAAU,yDAAyD;AACnE,UAAU,0DAA0D;AACpE,UAAU,sEAAsE;AAChF,UAAU,yEAAyE;AACnF,UAAU,0EAA0E;AACpF,UAAU,4EAA4E;AACtF,UAAU,gEAAgE;AAC1E;AACA,6BAA6B,2DAA2D;AACxF;AACA;AACA;AACA,sDAAsD,2CAA2C;AACjG;AACA;AACA,qCAAqC,+BAA+B;AACpE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,UAAU,wCAAwC;AAClD;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA,kDAAkD,kCAAkC;AACpF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,6BAA6B,MAAM;AACnC,uEAAuE,IAAI;AAC3E,6EAA6E,IAAI;AACjF,6EAA6E,IAAI;AACjF;;AAEA,0BAA0B,oBAAoB;AAC9C;AACA,qEAAqE,IAAI,sBAAsB,aAAa;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD,qCAAqC,cAAc;AACnD,qCAAqC,cAAc;AACnD;AACA;AACA,qCAAqC,4BAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,IAAI,GAAG,OAAO,GAAG,aAAa,GAAG,MAAM;AAC7D;AACA;AACA;AACA,4DAA4D,IAAI,YAAY,aAAa;AACzF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,cAAc;AAC1C;AACA;AACA,qBAAqB,IAAI,GAAG,OAAO;AACnC,4BAA4B,IAAI,sEAAsE,IAAI,gBAAgB,OAAO;AACjI;AACA;;AAEA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA,4BAA4B,IAAI,gBAAgB;AAChD;AACA;AACA;AACA;AACA,4BAA4B,IAAI,gBAAgB;AAChD;AACA;;AAEA;;AAEA;AACA;;;;;;;ACppBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,WAAW,IAAI;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,IAAI,IAAI,IAAI;AACrC;AACA;;AAEA;AACA;AACA,uBAAuB,IAAI,IAAI,IAAI;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kCAAkC;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,0DAA0D;AACvE;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,wDAAwD;AACrE;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,GAAG;AACH;AACA;AACA;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;A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;ACfA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACvDA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACrBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ,iBAAiB,QAAQ;AACnF;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACvJA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;AC/BA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;ACfA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC1DA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA,UAAU,KAAK,GAAG,QAAQ,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,qBAAqB;AAC5E;AACA;AACA,uDAAuD,0BAA0B;AACjF,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACxGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;ACnEA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,aAAa,mBAAO,CAAC,EAAmB;AACxC,aAAa,mBAAO,CAAC,EAAmB;AACxC,aAAa,mBAAO,CAAC,EAAmB;AACxC,kBAAkB,mBAAO,CAAC,EAAwB;AAClD,mBAAmB,mBAAO,CAAC,EAAyB;AACpD,aAAa,mBAAO,CAAC,EAAmB;AACxC,aAAa,mBAAO,CAAC,EAAuB;AAC5C,gBAAgB,mBAAO,CAAC,EAAsB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA,yBAAyB,mBAAO,CAAC,EAAsB;AACvD,yBAAyB,mBAAO,CAAC,EAAsB;AACvD,yBAAyB,mBAAO,CAAC,EAAsB;AACvD,yBAAyB,mBAAO,CAAC,EAAsB;AACvD,yBAAyB,mBAAO,CAAC,EAAsB;AACvD,uBAAuB,mBAAO,CAAC,EAAoB;AACnD,uBAAuB,mBAAO,CAAC,EAAoB;AACnD,uBAAuB,mBAAO,CAAC,EAAoB;;AAEnD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3DA,oBAAoB,mBAAO,CAAC,EAAkB;;AAE9C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AChXA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC9BA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;ACzDA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;ACxEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,iBAAiB,mBAAO,CAAC,EAAgB;;AAEzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,0DAA0D;AAClG;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;AC5DA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA;AACA,GAAG,kCAAkC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AC5DA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS,wCAAwC;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AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,gBAAgB,GAAG,mBAAmB,GAAG,aAAa;AAClF;AACA;AACA;AACA;;;;;;;;ACtIA;;AAEA;;AAEA,gBAAgB,gBAAgB;AAChC,gDAAgD,gBAAgB;AAChE;;AAEA,gBAAgB,iBAAiB;AACjC,gDAAgD,iBAAiB;AACjE;;AAEA,iBAAiB,kBAAkB;AACnC,iDAAiD,kBAAkB;AACnE;;AAEA,uBAAuB,SAAS;AAChC,wDAAwD,SAAS;AACjE;;AAEA,oBAAoB,eAAe;AACnC,oDAAoD,eAAe;AACnE;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AChCA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;;AAEA;;AAEA;;AAEA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO,GAAG,QAAQ,GAAG,OAAO;AACvC;AACA;AACA;;AAEA,gBAAgB,aAAa,YAAY,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA,oCAAoC,kBAAkB;AACtD;AACA,mCAAmC,kBAAkB;AACrD;;AAEA,qBAAqB,aAAa,qBAAqB,QAAQ;AAC/D;AACA,yDAAyD,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,aAAa,mBAAmB,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA;AACA,2BAA2B,+FAA+F;AA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A;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,sBAAsB,aAAa;AACnC;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACxDA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA,2BAA2B,uEAAuE;AAClG;AACA;AACA;AACA,2BAA2B,0EAA0E;AACrG;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","module.exports = require(\"require3\");","module.exports = app => {\n\n  class Function extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aFunction', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return Function;\n};\n","module.exports = {\n  systemRoles: [ 'root', 'anonymous', 'authenticated', 'template', 'system', 'registered', 'activated', 'superuser', 'organization', 'internal', 'external' ],\n  atom: {\n    action: {\n      create: 1,\n      read: 2,\n      write: 3,\n      delete: 4,\n      save: 51,\n      submit: 52,\n      custom: 100, // custom action start from custom\n    },\n    actionMeta: {\n      create: { title: 'Create', actionComponent: 'action' },\n      read: { title: 'View', actionPath: 'atom/view?atomId={{atomId}}&itemId={{itemId}}&atomClassId={{atomClassId}}&module={{module}}&atomClassName={{atomClassName}}&atomClassIdParent={{atomClassIdParent}}' },\n      write: { title: 'Edit', actionPath: 'atom/edit?atomId={{atomId}}&itemId={{itemId}}&atomClassId={{atomClassId}}&module={{module}}&atomClassName={{atomClassName}}&atomClassIdParent={{atomClassIdParent}}' },\n      delete: { title: 'Delete', actionComponent: 'action' },\n      save: { title: 'Save', actionComponent: 'action', authorize: false },\n      submit: { title: 'Submit', actionComponent: 'action', authorize: false },\n      custom: { title: 'Custom' },\n    },\n    orders: [\n      { name: 'createdAt', title: 'Created Time', by: 'desc', tableAlias: 'a' },\n      { name: 'updatedAt', title: 'Modification Time', by: 'desc', tableAlias: 'a' },\n      { name: 'atomFlag', title: 'Atom Flag', by: 'asc', tableAlias: 'a' },\n      { name: 'atomName', title: 'Atom Name', by: 'asc', tableAlias: 'a' },\n    ],\n  },\n  function: {\n    scene: {\n      default: 0,\n      create: 1,\n      list: 2,\n      report: 20,\n      tools: 50,\n      custom: 100,\n    },\n  },\n};\n","module.exports = app => {\n\n  class AtomClass extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomClass', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return AtomClass;\n};\n","module.exports = app => {\n\n  class AtomAction extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomAction', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return AtomAction;\n};\n","module.exports = app => {\n\n  class Atom extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAtom', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n\n  class AtomStar extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomStar', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return AtomStar;\n};\n","module.exports = app => {\n\n  class AtomLabel extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomLabel', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return AtomLabel;\n};\n","module.exports = app => {\n\n  class AtomLabelRef extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomLabelRef', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return AtomLabelRef;\n};\n","module.exports = ctx => {\n  class Procedure {\n\n    selectAtoms({ iid, userIdWho, tableName, where, orders, page, star, label, comment, file }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- c: aViewUserRightAtom\n      // -- d: aAtomStar\n      // -- e: aAtomLabelRef\n      // -- f: {item}\n      // -- g: aUser\n      // -- h: aComment\n      // -- i: aFile\n\n      // for safe\n      tableName = tableName ? ctx.model.format('??', tableName) : null;\n      where = where ? ctx.model._where2(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      star = parseInt(star);\n      label = parseInt(label);\n      comment = parseInt(comment);\n      file = parseInt(file);\n\n      // vars\n      let\n        _starJoin,\n        _starWhere;\n\n      let\n        _labelJoin,\n        _labelWhere;\n      let _commentField,\n        _commentJoin,\n        _commentWhere;\n      let _fileField,\n        _fileJoin,\n        _fileWhere;\n      let _itemField,\n        _itemJoin;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // star\n      if (star) {\n        _starJoin = ' inner join aAtomStar d on a.id=d.atomId';\n        _starWhere = ` and d.iid=${iid} and d.userId=${userIdWho} and d.star=1`;\n      } else {\n        _starJoin = '';\n        _starWhere = '';\n      }\n      const _starField = `,(select d2.star from aAtomStar d2 where d2.iid=${iid} and d2.atomId=a.id and d2.userId=${userIdWho}) as star`;\n\n      // label\n      if (label) {\n        _labelJoin = ' inner join aAtomLabelRef e on a.id=e.atomId';\n        _labelWhere = ` and e.iid=${iid} and e.userId=${userIdWho} and e.labelId=${label}`;\n      } else {\n        _labelJoin = '';\n        _labelWhere = '';\n      }\n      const _labelField = `,(select e2.labels from aAtomLabel e2 where e2.iid=${iid} and e2.atomId=a.id and e2.userId=${userIdWho}) as labels`;\n\n      // comment\n      if (comment) {\n        _commentField =\n             `,h.id h_id,h.createdAt h_createdAt,h.updatedAt h_updatedAt,h.userId h_userId,h.sorting h_sorting,h.heartCount h_heartCount,h.replyId h_replyId,h.replyUserId h_replyUserId,h.replyContent h_replyContent,h.content h_content,h.summary h_summary,h.html h_html,h.userName h_userName,h.avatar h_avatar,h.replyUserName h_replyUserName,\n               (select h2.heart from aCommentHeart h2 where h2.iid=${iid} and h2.commentId=h.id and h2.userId=${userIdWho}) as h_heart`;\n\n        _commentJoin = ' inner join aViewComment h on h.atomId=a.id';\n        _commentWhere = ` and h.iid=${iid} and h.deleted=0`;\n      } else {\n        _commentField = '';\n        _commentJoin = '';\n        _commentWhere = '';\n      }\n\n      // file\n      if (file) {\n        _fileField = ',i.id i_id,i.createdAt i_createdAt,i.updatedAt i_updatedAt,i.userId i_userId,i.downloadId i_downloadId,i.mode i_mode,i.fileSize i_fileSize,i.width i_width,i.height i_height,i.filePath i_filePath,i.fileName i_fileName,i.realName i_realName,i.fileExt i_fileExt,i.encoding i_encoding,i.mime i_mime,i.attachment i_attachment,i.flag i_flag,i.userName i_userName,i.avatar i_avatar';\n        _fileJoin = ' inner join aViewFile i on i.atomId=a.id';\n        _fileWhere = ` and i.iid=${iid} and i.deleted=0`;\n      } else {\n        _fileField = '';\n        _fileJoin = '';\n        _fileWhere = '';\n      }\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.atomId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // sql\n      const _sql =\n        `select ${_itemField}\n                a.id as atomId,a.itemId,a.atomEnabled,a.atomFlag,a.atomFlow,a.atomClassId,a.atomName,a.allowComment,a.starCount,a.commentCount,a.attachmentCount,a.readCount,a.userIdCreated,a.userIdUpdated,a.createdAt as atomCreatedAt,a.updatedAt as atomUpdatedAt,\n                b.module,b.atomClassName,b.atomClassIdParent,\n                g.userName,g.avatar\n                ${_starField} ${_labelField} ${_commentField} ${_fileField}\n          from aAtom a\n\n            inner join aAtomClass b on a.atomClassId=b.id\n            inner join aUser g on a.userIdCreated=g.id\n            ${_itemJoin}\n            ${_starJoin}\n            ${_labelJoin}\n            ${_commentJoin}\n            ${_fileJoin}\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid}\n             ${_starWhere}\n             ${_labelWhere}\n             ${_commentWhere}\n             ${_fileWhere}\n             and (\n                     (a.userIdCreated=${userIdWho}) or\n                     (\n                           a.atomEnabled=1 and\n                           (\n                               (\n                                 a.atomFlow=1 and\n                                   (\n                                     (\n                                       exists(\n                                               select c.atomId from aViewUserRightAtom c where c.iid=${iid} and a.id=c.atomId and c.action>2 and c.userIdWho=${userIdWho}\n                                             )\n                                     ) or\n                                     (\n                                       a.userIdCreated=${userIdWho} and exists(select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action>2 and c.scope=0 and c.userIdWho=${userIdWho}\n                                     )\n                                   )\n                                 )\n                               )\n                               or\n                               (\n                                 a.atomFlow=0 and\n                                   (\n                                     b.public=1 or\n                                     exists(\n                                             select c.atomId from aViewUserRightAtom c where c.iid=${iid} and a.id=c.atomId and c.action=2 and c.userIdWho=${userIdWho}\n                                           )\n                                   )\n                               )\n                           )\n                     )\n                 )\n           )\n\n          ${_orders}\n          ${_limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    getAtom({ iid, userIdWho, tableName, atomId }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- d: aAtomStar\n      // -- e: aAtomLabelRef\n      // -- f: {item}\n      // -- g: aUser\n\n      // for safe\n      tableName = tableName ? ctx.model.format('??', tableName) : null;\n\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n\n      // vars\n      let _starField,\n        _labelField;\n      let _itemField,\n        _itemJoin;\n\n      // star\n      if (userIdWho) {\n        _starField =\n          `,(select d.star from aAtomStar d where d.iid=${iid} and d.atomId=a.id and d.userId=${userIdWho}) as star`;\n      } else {\n        _starField = '';\n      }\n\n      // label\n      if (userIdWho) {\n        _labelField =\n          `,(select e.labels from aAtomLabel e where e.iid=${iid} and e.atomId=a.id and e.userId=${userIdWho}) as labels`;\n      } else {\n        _labelField = '';\n      }\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.atomId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // sql\n      const _sql =\n        `select ${_itemField}\n                a.id as atomId,a.itemId,a.atomEnabled,a.atomFlag,a.atomFlow,a.atomClassId,a.atomName,a.allowComment,a.starCount,a.commentCount,a.attachmentCount,a.readCount,a.userIdCreated,a.userIdUpdated,a.createdAt as atomCreatedAt,a.updatedAt as atomUpdatedAt,\n                b.module,b.atomClassName,b.atomClassIdParent,\n                g.userName,g.avatar\n                ${_starField}\n                ${_labelField}\n          from aAtom a\n\n            inner join aAtomClass b on a.atomClassId=b.id\n            inner join aUser g on a.userIdCreated=g.id\n            ${_itemJoin}\n\n          where a.id=${atomId}\n            and a.deleted=0 and a.iid=${iid}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    checkRightRead({ iid, userIdWho, atomId }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n      // sql\n      const _sql =\n        `select a.* from aAtom a\n           left join aAtomClass b on a.atomClassId=b.id\n             where\n             (\n                 a.deleted=0 and a.iid=${iid} and a.id=${atomId}\n                 and\n                 (\n                      (a.userIdCreated=${userIdWho})\n                      or\n                      (\n                          a.atomEnabled=1 and\n                          (\n                              (\n                                  a.atomFlow=1 and\n                                  (\n                                      (\n                                        exists(\n                                                select c.atomId from aViewUserRightAtom c where c.iid=${iid} and a.id=c.atomId and c.action>2 and c.userIdWho=${userIdWho}\n                                              )\n                                      )\n                                      or\n                                      (\n                                        a.userIdCreated=${userIdWho} and\n                                        exists(\n                                                select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action>2 and c.scope=0 and c.userIdWho=${userIdWho}\n                                              )\n                                      )\n                                  )\n                              )\n                              or\n                              (\n                                  a.atomFlow=0 and\n                                  (\n                                      b.public=1 or\n                                      exists(\n                                              select c.atomId from aViewUserRightAtom c where c.iid=${iid} and a.id=c.atomId and c.action=2 and c.userIdWho=${userIdWho}\n                                            )\n                                  )\n                              )\n                          )\n                      )\n                 )\n             )\n        `;\n      return _sql;\n    }\n\n    checkRightUpdate({ iid, userIdWho, atomId, action, actionFlag }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n      action = parseInt(action);\n\n      actionFlag = ctx.model.format('?', actionFlag);\n\n      // sql\n      const _sql =\n        `select a.* from aAtom a\n           where\n           (\n             a.deleted=0 and a.iid=${iid} and a.id=${atomId}\n             and (\n                  (a.atomEnabled=0 and a.userIdCreated=${userIdWho}) or\n                  (a.atomEnabled=1 and (\n                    (exists(select c.atomId from aViewUserRightAtom c where c.iid=${iid} and a.id=c.atomId and c.action=${action} and (${actionFlag}='' or find_in_set(a.atomFlag,${actionFlag})>0 ) and c.userIdWho=${userIdWho})) or\n                    (a.userIdCreated=${userIdWho} and exists(select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action=${action} and (${actionFlag}='' or find_in_set(a.atomFlag,${actionFlag})>0 ) and c.scope=0 and c.userIdWho=${userIdWho}))\n                  ))\n                )\n           )\n        `;\n      return _sql;\n    }\n\n    checkRightAction({ iid, userIdWho, atomId, action, actionFlag }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n      action = parseInt(action);\n\n      actionFlag = ctx.model.format('?', actionFlag);\n\n      // sql\n      const _sql =\n        `select a.* from aAtom a\n            where\n            (\n               a.deleted=0 and a.iid=${iid} and a.id=${atomId} and a.atomEnabled=1\n               and (\n                      (exists(select c.atomId from aViewUserRightAtom c where c.iid=${iid} and a.id=c.atomId and c.action=${action} and (${actionFlag}='' or find_in_set(a.atomFlag,${actionFlag})>0 ) and c.userIdWho=${userIdWho})) or\n                      (a.userIdCreated=${userIdWho} and exists(select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action=${action} and (${actionFlag}='' or find_in_set(a.atomFlag,${actionFlag})>0 ) and c.scope=0 and c.userIdWho=${userIdWho}))\n                   )\n            )\n        `;\n      return _sql;\n    }\n\n    checkRightCreate({ iid, userIdWho, atomClassId }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomClassId = parseInt(atomClassId);\n\n      // sql\n      const _sql =\n        `select a.* from aAtomClass a\n            inner join aViewUserRightAtomClass b on a.id=b.atomClassId\n              where b.iid=${iid} and b.atomClassId=${atomClassId} and b.action=1 and b.userIdWho=${userIdWho}\n        `;\n      return _sql;\n    }\n\n    selectFunctions({ iid, locale, userIdWho, where, orders, page, star }) {\n      // -- tables\n      // -- a: aFunction\n      // -- b: aFunctionLocale\n      // -- c: aViewUserRightFunction\n      // -- d: aFunctionStar\n      // -- e: aAtomClass\n\n      // for safe\n      where = where ? ctx.model._where2(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      star = parseInt(star);\n\n      locale = locale ? ctx.model.format('?', locale) : null;\n\n      // vars\n      let _starField,\n        _starJoin,\n        _starWhere;\n      let _localeField,\n        _localeJoin,\n        _localeWhere;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // star\n      if (star) {\n        _starField = '';\n        _starJoin = ' inner join aFunctionStar d on a.id=d.functionId';\n        _starWhere = ` and d.iid=${iid} and d.userId=${userIdWho} and d.star=1`;\n      } else {\n        _starField =\n        `,(select d.star from aFunctionStar d where d.iid=${iid} and d.functionId=a.id and d.userId=${userIdWho}) as star`;\n        _starJoin = '';\n        _starWhere = '';\n      }\n\n      // locale\n      if (locale) {\n        _localeField = ',b.titleLocale';\n        _localeJoin = ' inner join aFunctionLocale b on a.id=b.functionId';\n        _localeWhere = ` and b.iid=${iid} and b.locale=${locale}`;\n      } else {\n        _localeField = '';\n        _localeJoin = '';\n        _localeWhere = '';\n      }\n\n      // sql\n      const _sql =\n        `select a.*,\n                e.atomClassName,e.atomClassIdParent\n                ${_localeField}\n                ${_starField}\n           from aFunction a\n\n             left join aAtomClass e on a.atomClassId=e.id\n             ${_localeJoin}\n             ${_starJoin}\n\n             ${_where}\n\n              (\n                a.deleted=0 and a.iid=${iid}\n                ${_localeWhere}\n                ${_starWhere}\n                and (\n                       a.public=1\n                       or\n                       exists(\n                               select c.functionId from aViewUserRightFunction c where c.iid=${iid} and a.id=c.functionId and c.userIdWho=${userIdWho}\n                             )\n                    )\n              )\n\n            ${_orders}\n            ${_limit}\n       `;\n\n      // ok\n      return _sql;\n    }\n\n    checkRightFunction({ iid, userIdWho, functionId }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      functionId = parseInt(functionId);\n      // sql\n      const _sql =\n        `select a.* from aFunction a\n            where a.deleted=0 and a.iid=${iid} and a.id=${functionId}\n              and ( a.public=1 or\n                    exists(select c.functionId from aViewUserRightFunction c where c.iid=${iid} and c.functionId=${functionId} and c.userIdWho=${userIdWho})\n                  )\n        `;\n      return _sql;\n    }\n\n    checkFunctionLocales({ iid, locale }) {\n      // for safe\n      iid = parseInt(iid);\n      locale = ctx.model.format('?', locale);\n      // sql\n      const _sql =\n        `select a.* from aFunction a\n            where a.iid=${iid} and a.menu=1\n              and not exists(\n                select b.id from aFunctionLocale b\n                  where b.iid=${iid} and b.locale=${locale} and b.functionId=a.id\n                    and (b.titleLocale is not null and b.titleLocale<>'')\n                )\n        `;\n      return _sql;\n    }\n\n  }\n\n  return Procedure;\n\n};\n","module.exports = app => {\n\n  class FunctionStar extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aFunctionStar', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return FunctionStar;\n};\n","module.exports = app => {\n\n  class FunctionLocale extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aFunctionLocale', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return FunctionLocale;\n};\n","module.exports = app => {\n\n  class Role extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRole', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return Role;\n};\n","module.exports = app => {\n\n  class RoleInc extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleInc', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return RoleInc;\n};\n","module.exports = app => {\n\n  class UserRole extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aUserRole', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return UserRole;\n};\n","module.exports = app => {\n\n  class RoleRight extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleRight', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return RoleRight;\n};\n","module.exports = app => {\n\n  class RoleRightRef extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleRightRef', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return RoleRightRef;\n};\n","module.exports = app => {\n\n  class RoleFunction extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleFunction', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return RoleFunction;\n};\n","const require3 = require('require3');\nconst uuid = require3('uuid');\n\nconst modelFn = require('../../../model/user.js');\nconst modelAgentFn = require('../../../model/userAgent.js');\nconst modelAuthFn = require('../../../model/auth.js');\nconst modelAuthProviderFn = require('../../../model/authProvider.js');\n\nconst _usersAnonymous = {};\n\nmodule.exports = ctx => {\n\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class User {\n\n    constructor() {\n      this._model = null;\n      this._modelAgent = null;\n      this._modelAuth = null;\n      this._modelAuthProvider = null;\n      this._sequence = null;\n      this._config = null;\n    }\n\n    get model() {\n      if (!this._model) this._model = new (modelFn(ctx.app))(ctx);\n      return this._model;\n    }\n\n    get modelAgent() {\n      if (!this._modelAgent) this._modelAgent = new (modelAgentFn(ctx.app))(ctx);\n      return this._modelAgent;\n    }\n\n    get modelAuth() {\n      if (!this._modelAuth) this._modelAuth = new (modelAuthFn(ctx.app))(ctx);\n      return this._modelAuth;\n    }\n\n    get modelAuthProvider() {\n      if (!this._modelAuthProvider) this._modelAuthProvider = new (modelAuthProviderFn(ctx.app))(ctx);\n      return this._modelAuthProvider;\n    }\n\n    get sequence() {\n      if (!this._sequence) this._sequence = ctx.meta.sequence.module(moduleInfo.relativeName);\n      return this._sequence;\n    }\n\n    get config() {\n      if (!this._config) this._config = ctx.config.module(moduleInfo.relativeName);\n      return this._config;\n    }\n\n    async anonymous() {\n      // cache\n      let _userAnonymous = _usersAnonymous[ctx.instance.id];\n      if (_userAnonymous) return _userAnonymous;\n      // try get\n      _userAnonymous = await this.get({ anonymous: 1 });\n      if (_userAnonymous) {\n        _usersAnonymous[ctx.instance.id] = _userAnonymous;\n        return _userAnonymous;\n      }\n      // add user\n      const userId = await this.add({ disabled: 0, anonymous: 1 });\n      // addRole\n      const role = await ctx.meta.role.getSystemRole({ roleName: 'anonymous' });\n      await ctx.meta.role.addUserRole({ userId, roleId: role.id });\n      // ready\n      _userAnonymous = await this.get({ id: userId });\n      _usersAnonymous[ctx.instance.id] = _userAnonymous;\n      return _userAnonymous;\n    }\n\n    async loginAsAnonymous() {\n      const userOp = await this.anonymous();\n      const user = {\n        op: userOp,\n        agent: userOp,\n        provider: null,\n      };\n      await ctx.login(user);\n      // maxAge\n      const maxAge = this.config.anonymous.maxAge;\n      ctx.session.maxAge = maxAge;\n      // ok\n      return user;\n    }\n\n    anonymousId() {\n      let _anonymousId = ctx.cookies.get('anonymous', { encrypt: true });\n      if (!_anonymousId) {\n        _anonymousId = uuid.v4().replace(/-/g, '');\n        const maxAge = this.config.anonymous.maxAge;\n        ctx.cookies.set('anonymous', _anonymousId, { encrypt: true, maxAge });\n      }\n      return _anonymousId;\n    }\n\n    async check() {\n      // check if has ctx.user\n      if (!ctx.isAuthenticated() || !ctx.user.op || !ctx.user.agent || ctx.user.op.iid !== ctx.instance.id) ctx.throw(401);\n      // check if deleted,disabled,agent\n      const userOp = await this.get({ id: ctx.user.op.id });\n      // deleted\n      if (!userOp) ctx.throw.module(moduleInfo.relativeName, 1004);\n      // disabled\n      if (userOp.disabled) ctx.throw.module(moduleInfo.relativeName, 1005);\n      // hold user\n      ctx.user.op = userOp;\n      // agent\n      if (ctx.user.agent.id !== ctx.user.op.id) {\n        const agent = await this.agent({ userId: ctx.user.op.id });\n        if (!agent) ctx.throw.module(moduleInfo.relativeName, 1006);\n        if (agent.id !== ctx.user.agent.id) ctx.throw.module(moduleInfo.relativeName, 1006);\n        if (agent.disabled) ctx.throw.module(moduleInfo.relativeName, 1005);\n        // hold agent\n        ctx.user.agent = agent;\n      } else {\n        // hold agent\n        ctx.user.agent = userOp;\n      }\n    }\n\n    async setActivated({ user }) {\n      // save\n      if (user.activated !== undefined) delete user.activated;\n      await this.save({ user });\n      // tryActivate\n      const tryActivate = user.emailConfirmed || user.mobileVerified;\n      if (tryActivate) {\n        await this.userRoleStageActivate({ userId: user.id });\n      }\n    }\n\n    async userRoleStageAdd({ userId }) {\n      // roleNames\n      let roleNames = this.config.account.needActivation ? 'registered' : this.config.account.activatedRoles;\n      roleNames = roleNames.split(',');\n      for (const roleName of roleNames) {\n        const role = await ctx.meta.role.get({ roleName });\n        await ctx.meta.role.addUserRole({ userId, roleId: role.id });\n      }\n    }\n\n    async userRoleStageActivate({ userId }) {\n      // get\n      const user = await this.get({ id: userId });\n      // only once\n      if (user.activated) return;\n      // adjust role\n      if (this.config.account.needActivation) {\n        // userRoles\n        const userRoles = await ctx.meta.role.getUserRolesDirect({ userId });\n        // userRolesMap\n        const map = {};\n        for (const role of userRoles) {\n          map[role.roleName] = role;\n        }\n        // remove from registered\n        if (map.registered) {\n          const roleRegistered = await ctx.meta.role.getSystemRole({ roleName: 'registered' });\n          await ctx.meta.role.deleteUserRole({ userId, roleId: roleRegistered.id });\n        }\n        // add to activated\n        const roleNames = this.config.account.activatedRoles.split(',');\n        for (const roleName of roleNames) {\n          if (!map[roleName]) {\n            const role = await ctx.meta.role.get({ roleName });\n            await ctx.meta.role.addUserRole({ userId, roleId: role.id });\n          }\n        }\n      }\n      // set activated\n      await this.save({\n        user: { id: userId, activated: 1 },\n      });\n    }\n\n    async exists({ userName, email, mobile }) {\n      userName = userName || '';\n      email = email || '';\n      mobile = mobile || '';\n      if (this.config.checkUserName === true && userName) {\n        return await this.model.queryOne(\n          `select * from aUser\n             where iid=? and deleted=0 and ((userName=?) or (?<>'' and email=?) or (?<>'' and mobile=?))`,\n          [ ctx.instance.id, userName, email, email, mobile, mobile ]);\n      }\n      return await this.model.queryOne(\n        `select * from aUser\n             where iid=? and deleted=0 and ((?<>'' and email=?) or (?<>'' and mobile=?))`,\n        [ ctx.instance.id, email, email, mobile, mobile ]);\n    }\n\n    async add({\n      disabled = 0, userName, realName, email, mobile, avatar, motto, locale, anonymous = 0,\n    }) {\n      // check if incomplete information\n      let needCheck;\n      if (anonymous) {\n        needCheck = false;\n      } else if (this.config.checkUserName === true) {\n        needCheck = userName || email || mobile;\n      } else {\n        needCheck = email || mobile;\n      }\n      // if exists\n      if (needCheck) {\n        const res = await this.exists({ userName, email, mobile });\n        if (res) ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      // insert\n      const res = await this.model.insert({\n        disabled,\n        userName,\n        realName,\n        email,\n        mobile,\n        avatar,\n        motto,\n        locale,\n        anonymous,\n      });\n      return res.insertId;\n    }\n\n    async get(where) {\n      return await this.model.get(where);\n    }\n\n    async save({ user }) {\n      if (Object.keys(user).length > 1) {\n        await this.model.update(user);\n      }\n    }\n\n    async agent({ userId }) {\n      const sql = `\n        select a.* from aUser a\n          left join aUserAgent b on a.id=b.userIdAgent\n            where a.iid=? and a.deleted=0 and b.userId=?\n      `;\n      return await ctx.model.queryOne(sql, [ ctx.instance.id, userId ]);\n    }\n\n    async agentsBy({ userId }) {\n      const sql = `\n        select a.* from aUser a\n          left join aUserAgent b on a.id=b.userId\n            where a.iid=? and a.deleted=0 and b.userIdAgent=?\n      `;\n      return await ctx.model.query(sql, [ ctx.instance.id, userId ]);\n    }\n\n    async addAgent({ userIdAgent, userId }) {\n      await this.modelAgent.insert({\n        userIdAgent,\n        userId,\n      });\n    }\n\n    async removeAgent({ userIdAgent, userId }) {\n      await this.modelAgent.delete({\n        userIdAgent,\n        userId,\n      });\n    }\n\n    async switchAgent({ userIdAgent }) {\n      const op = ctx.user.op;\n      ctx.user.op = { id: userIdAgent };\n      try {\n        await this.check();\n        await ctx.login(ctx.user);\n        return ctx.user;\n      } catch (err) {\n        ctx.user.op = op;\n        throw err;\n      }\n    }\n\n    async switchOffAgent() {\n      return await this.switchAgent({ userIdAgent: ctx.user.agent.id });\n    }\n\n    async list({ roleId, query, anonymous, page }) {\n      const roleJoin = roleId ? 'left join aUserRole b on a.id=b.userId' : '';\n      const roleWhere = roleId ? `and b.roleId=${ctx.model._format2(roleId)}` : '';\n      const queryLike = query ? ctx.model._format2({ op: 'like', val: query }) : '';\n      const queryWhere = query ? `and ( a.userName like ${queryLike} or a.realName like ${queryLike} or a.mobile like ${queryLike} )` : '';\n      const anonymousWhere = anonymous !== undefined ? `and a.anonymous=${ctx.model._format2(anonymous)}` : '';\n      const _limit = ctx.model._limit(page.size, page.index);\n      const sql = `\n        select a.* from aUser a\n          ${roleJoin}\n            where a.iid=? and a.deleted=0\n                  ${anonymousWhere}\n                  ${roleWhere}\n                  ${queryWhere}\n            ${_limit}\n      `;\n      return await ctx.model.query(sql, [ ctx.instance.id ]);\n    }\n\n    async disable({ userId, disabled }) {\n      await this.model.update({ id: userId, disabled });\n    }\n\n    async delete({ userId }) {\n      await ctx.meta.role.deleteAllUserRoles({ userId });\n      await this.model.delete({ id: userId });\n    }\n\n    // roles\n    async roles({ userId, page }) {\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      return await ctx.model.query(`\n        select a.*,b.roleName from aUserRole a\n          left join aRole b on a.roleId=b.id\n            where a.iid=? and a.userId=?\n            ${_limit}\n        `, [ ctx.instance.id, userId ]);\n    }\n\n    // state: login/associate\n    async verify({ state = 'login', profileUser }) {\n      // verifyUser\n      const verifyUser = {};\n\n      // provider\n      const providerItem = await this.getAuthProvider({\n        module: profileUser.module,\n        providerName: profileUser.provider,\n      });\n      // const config = JSON.parse(providerItem.config);\n\n      // check if auth exists\n      const authItem = await this.modelAuth.get({\n        providerId: providerItem.id,\n        profileId: profileUser.profileId,\n      });\n      let authId;\n      let authUserId;\n      if (authItem) {\n        // update\n        authItem.profile = JSON.stringify(profileUser.profile);\n        await this.modelAuth.update(authItem);\n        authId = authItem.id;\n        authUserId = authItem.userId;\n      } else {\n        // add\n        const res = await this.modelAuth.insert({\n          providerId: providerItem.id,\n          profileId: profileUser.profileId,\n          profile: JSON.stringify(profileUser.profile),\n        });\n        authId = res.insertId;\n      }\n      verifyUser.provider = {\n        id: authId,\n        module: profileUser.module,\n        providerName: profileUser.provider,\n        // profile: profileUser.profile,  // maybe has private info\n      };\n\n      // columns\n      const columns = [\n        'userName', 'realName', 'email', 'mobile', 'avatar', 'motto', 'locale',\n      ];\n\n      //\n      let userId;\n      if (state === 'associate') {\n        // check if ctx.user exists\n        if (!ctx.user || ctx.user.agent.anonymous) return false;\n        userId = ctx.user.agent.id;\n        // associated\n        // update user\n        await this._updateUserInfo(userId, profileUser.profile, columns);\n        // force update auth's userId, maybe different\n        if (authUserId !== userId) {\n          // delete old records\n          await this.modelAuth.delete({\n            providerId: providerItem.id,\n            userId,\n          });\n          // update\n          await this.modelAuth.update({\n            id: authId,\n            userId,\n          });\n        }\n        // ready\n        verifyUser.op = ctx.user.op;\n        verifyUser.agent = ctx.user.agent;\n      } else if (state === 'login') {\n        // check if user exists\n        let user;\n        if (authUserId) {\n          user = await this.model.get({ id: authUserId });\n        }\n        if (user) {\n          // check if disabled\n          if (user.disabled) return false;\n          // update user\n          await this._updateUserInfo(user.id, profileUser.profile, columns);\n          userId = user.id;\n        } else {\n          // add user\n          userId = await this._addUserInfo(profileUser.profile, columns);\n          user = await this.model.get({ id: userId });\n          // update auth's userId\n          await this.modelAuth.update({\n            id: authId,\n            userId,\n          });\n        }\n        // ready\n        verifyUser.op = user;\n        verifyUser.agent = user;\n      }\n\n      // restore maxAge\n      if (profileUser.maxAge === 0) {\n        ctx.session.maxAge = 0;\n      } else {\n        ctx.session.maxAge = profileUser.maxAge || this.config.authenticated.maxAge;\n      }\n      return verifyUser;\n    }\n\n    async _addUserInfo(profile, columns) {\n      const user = {};\n      for (const column of columns) {\n        // others\n        await this._setUserInfoColumn(user, column, profile[column]);\n      }\n      // add user\n      const userId = await this.add(user);\n      // add role\n      await this.userRoleStageAdd({ userId });\n      // try setActivated\n      const data = { id: userId };\n      // emailConfirmed\n      if (profile.emailConfirmed && profile.email) {\n        data.emailConfirmed = 1;\n      }\n      // mobileVerified\n      if (profile.mobileVerified && profile.mobile) {\n        data.mobileVerified = 1;\n      }\n      // setActivated\n      await this.setActivated({ user: data });\n      // ok\n      return userId;\n    }\n    async _updateUserInfo(userId, profile, columns) {\n      const users = await this.model.select({\n        where: { id: userId },\n        columns,\n      });\n      const user = users[0];\n      for (const column of columns) {\n        await this._setUserInfoColumn(user, column, profile[column]);\n      }\n      user.id = userId;\n      await this.save({ user });\n    }\n\n    async _setUserInfoColumn(user, column, value) {\n      // only set when empty\n      if (user[column] || !value) return;\n      // userName\n      if (column === 'userName') {\n        const res = await this.exists({ [column]: value });\n        if (res) {\n          // sequence\n          const sequence = await this.sequence.next('userName');\n          value = `${value}__${sequence}`;\n        }\n      } else if (column === 'email' || column === 'mobile') {\n        const res = await this.exists({ [column]: value });\n        if (res) {\n          value = null;\n        }\n      }\n      if (value) {\n        user[column] = value;\n      }\n    }\n\n    async getAuthProvider({ subdomain, iid, id, module, providerName }) {\n      // ctx.instance maybe not exists\n      const data = id ? {\n        iid: iid || ctx.instance.id,\n        id,\n      } : {\n        iid: iid || ctx.instance.id,\n        module,\n        providerName,\n      };\n      const res = await ctx.db.get('aAuthProvider', data);\n      if (res) return res;\n      if (!module || !providerName) throw new Error('Invalid arguments');\n      // queue\n      return await ctx.app.meta.queue.pushAsync({\n        subdomain: subdomain || ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'registerAuthProvider',\n        data: { module, providerName },\n      });\n    }\n\n    async registerAuthProvider({ module, providerName }) {\n      // get\n      const res = await this.modelAuthProvider.get({ module, providerName });\n      if (res) return res;\n      // data\n      const _module = ctx.app.meta.modules[module];\n      const _provider = _module.main.meta.auth.providers[providerName];\n      if (!_provider) throw new Error(`authProvider ${module}:${providerName} not found!`);\n      const data = {\n        module,\n        providerName,\n        config: JSON.stringify(_provider.config),\n      };\n      // insert\n      const res2 = await this.modelAuthProvider.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n  }\n\n  return User;\n};\n","module.exports = app => {\n\n  class User extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aUser', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return User;\n};\n","module.exports = app => {\n\n  class UserAgent extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aUserAgent', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return UserAgent;\n};\n","module.exports = app => {\n\n  class Auth extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAuth', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n\n  class AuthProvider extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthProvider', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return AuthProvider;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    constants,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    base: {\n      global: true,\n      dependencies: 'instance,event',\n    },\n    auth: {\n      global: true,\n      dependencies: 'base,sequence',\n      ignore: /\\/version\\/(update|init|test)/,\n    },\n    right: {\n      global: true,\n      dependencies: 'auth,validation',\n    },\n    jsonp: {\n      global: false,\n    },\n    httpLog: {\n      global: false,\n      dependencies: 'instance',\n    },\n  };\n\n  // startups\n  config.startups = {\n    installAuthProviders: {\n      type: 'all',\n      path: 'auth/installAuthProviders',\n    },\n    clearFunctionLocales: {\n      type: 'worker',\n      path: 'function/clearLocales',\n    },\n  };\n\n  // queues\n  config.queues = {\n    checkFunctionLocale: {\n      path: 'function/checkLocale',\n    },\n    registerFunction: {\n      path: 'function/register',\n    },\n    registerAtomAction: {\n      path: 'atomAction/register',\n    },\n    registerAtomClass: {\n      path: 'atomClass/register',\n    },\n    registerAuthProvider: {\n      path: 'auth/register',\n    },\n  };\n\n  // pageSize\n  config.pageSize = 20;\n\n  // locales\n  config.locales = {\n    'en-us': 'English',\n    'zh-cn': 'Chinese',\n  };\n  // anonymous\n  config.anonymous = {\n    maxAge: 365 * 24 * 3600 * 1000, // 365 天\n  };\n  // authenticated or rememberMe\n  config.authenticated = {\n    maxAge: 30 * 24 * 3600 * 1000, // 30 天\n  };\n  // checkUserName\n  config.checkUserName = true;\n  // account\n  config.account = {\n    needActivation: true,\n    activationWays: 'mobile,email',\n    url: {\n      emailConfirm: '/a/authsimple/emailConfirm',\n      mobileVerify: '',\n      passwordChange: '/a/authsimple/passwordChange',\n      passwordForgot: '/a/authsimple/passwordForgot',\n      passwordReset: '/a/authsimple/passwordReset',\n    },\n    //  default is 'activated', if need activating by mobile/email, then add to 'registered' first\n    activatedRoles: 'activated',\n  };\n\n  // public dir\n  config.publicDir = '';\n\n  // comment\n  config.comment = {\n    trim: {\n      limit: 100,\n      wordBreak: false,\n      preserveTags: false,\n    },\n  };\n\n  // httpLog\n  config.httpLog = true;\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'Comment List': '评论列表',\n  'Element exists': '元素已存在',\n  'Element does not exist': '元素不存在',\n  'Operation failed': '操作失败',\n  'User does not exist': '用户不存在',\n  'User is disabled': '用户被禁用',\n  'Agent user does not exist': '代理用户不存在',\n  'Incomplete information': '信息不完整',\n  'Should delete children first': '应该先删除子角色',\n  'Cannot contain __': '不能包含__',\n  'Atom Flag': '原子标记',\n  'Atom Name': '原子名称',\n  'Modification Time': '修改时间',\n  'Created Time': '创建时间',\n  Draft: '草稿',\n  Base: '基本',\n  English: '英文',\n  Chinese: '中文',\n  Create: '新建',\n  View: '查看',\n  Edit: '编辑',\n  Delete: '删除',\n  Save: '保存',\n  Submit: '提交',\n  Atom: '原子',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Element exists',\n  1002: 'Element does not exist',\n  1003: 'Operation failed',\n  1004: 'User does not exist',\n  1005: 'User is disabled',\n  1006: 'Agent user does not exist',\n  1007: 'Incomplete information',\n  1008: 'Should delete children first',\n};\n","const base = require('./middleware/base.js');\nconst auth = require('./middleware/auth.js');\nconst right = require('./middleware/right.js');\nconst jsonp = require('./middleware/jsonp.js');\nconst httpLog = require('./middleware/httpLog.js');\n\nmodule.exports = {\n  base,\n  auth,\n  right,\n  jsonp,\n  httpLog,\n};\n","// base\nconst BaseFn = require('./adapter/base.js');\nconst BASE = Symbol('CTX#__BASE');\n\n// atomClass\nconst AtomClassFn = require('./adapter/atomClass.js');\nconst ATOMCLASS = Symbol('CTX#__ATOMCLASS');\n\n// atomClass\nconst AtomActionFn = require('./adapter/atomAction.js');\nconst ATOMACTION = Symbol('CTX#__ATOMACTION');\n\n// atom\nconst AtomFn = require('./adapter/atom.js');\nconst ATOM = Symbol('CTX#__ATOM');\n\n// function\nconst FunctionFn = require('./adapter/function.js');\nconst FUNCTION = Symbol('CTX#__FUNCTION');\n\n// role\nconst RoleFn = require('./adapter/role.js');\nconst ROLE = Symbol('CTX#__ROLE');\n\n// user\nconst UserFn = require('./adapter/user.js');\nconst USER = Symbol('CTX#__USER');\n\n// util\nconst UtilFn = require('./adapter/util.js');\nconst UTIL = Symbol('CTX#__UTIL');\n\nmodule.exports = () => {\n  return async function base(ctx, next) {\n    ctx.meta = ctx.meta || {};\n    // base\n    Object.defineProperty(ctx.meta, 'base', {\n      get() {\n        if (ctx.meta[BASE] === undefined) {\n          ctx.meta[BASE] = new (BaseFn(ctx))();\n        }\n        return ctx.meta[BASE];\n      },\n    });\n    // atomClass\n    Object.defineProperty(ctx.meta, 'atomClass', {\n      get() {\n        if (ctx.meta[ATOMCLASS] === undefined) {\n          ctx.meta[ATOMCLASS] = new (AtomClassFn(ctx))();\n        }\n        return ctx.meta[ATOMCLASS];\n      },\n    });\n    // atomAction\n    Object.defineProperty(ctx.meta, 'atomAction', {\n      get() {\n        if (ctx.meta[ATOMACTION] === undefined) {\n          ctx.meta[ATOMACTION] = new (AtomActionFn(ctx))();\n        }\n        return ctx.meta[ATOMACTION];\n      },\n    });\n    // atom\n    Object.defineProperty(ctx.meta, 'atom', {\n      get() {\n        if (ctx.meta[ATOM] === undefined) {\n          ctx.meta[ATOM] = new (AtomFn(ctx))();\n        }\n        return ctx.meta[ATOM];\n      },\n    });\n    // function\n    Object.defineProperty(ctx.meta, 'function', {\n      get() {\n        if (ctx.meta[FUNCTION] === undefined) {\n          ctx.meta[FUNCTION] = new (FunctionFn(ctx))();\n        }\n        return ctx.meta[FUNCTION];\n      },\n    });\n    // role\n    Object.defineProperty(ctx.meta, 'role', {\n      get() {\n        if (ctx.meta[ROLE] === undefined) {\n          ctx.meta[ROLE] = new (RoleFn(ctx))();\n        }\n        return ctx.meta[ROLE];\n      },\n    });\n    // user\n    Object.defineProperty(ctx.meta, 'user', {\n      get() {\n        if (ctx.meta[USER] === undefined) {\n          ctx.meta[USER] = new (UserFn(ctx))();\n        }\n        return ctx.meta[USER];\n      },\n    });\n    // util\n    Object.defineProperty(ctx.meta, 'util', {\n      get() {\n        if (ctx.meta[UTIL] === undefined) {\n          ctx.meta[UTIL] = new (UtilFn(ctx))();\n        }\n        return ctx.meta[UTIL];\n      },\n    });\n\n    // next\n    await next();\n  };\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst fse = require3('fs-extra');\nconst constants = require('../../constants.js');\n\nconst _modulesLocales = {};\nconst _locales = {};\nconst _atomClasses = {};\nconst _actions = {};\nconst _flags = {};\nconst _orders = {};\nconst _functions = {};\nconst _menus = {};\nconst _authProvidersLocales = {};\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Base {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    // other module's base\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get host() {\n      const config = ctx.config.module(moduleInfo.relativeName);\n      return config.host || ctx.host;\n    }\n\n    get protocol() {\n      const config = ctx.config.module(moduleInfo.relativeName);\n      return config.protocol || ctx.protocol;\n    }\n\n    getAbsoluteUrl(path) {\n      const prefix = this.host ? `${this.protocol}://${this.host}` : '';\n      return `${prefix}${path}`;\n    }\n\n    // get forward url\n    getForwardUrl(path) {\n      const prefix = (ctx.app.meta.isTest || ctx.app.meta.isLocal) ? ctx.app.config.static.prefix : '/public/';\n      return `${prefix}${ctx.instance.id}/${path}`;\n    }\n\n    // get root path\n    async getRootPath() {\n      if (ctx.app.meta.isTest || ctx.app.meta.isLocal) {\n        return ctx.app.config.static.dir;\n      }\n      const dir = ctx.config.module(moduleInfo.relativeName).publicDir || path.join(require('os').homedir(), 'cabloy', ctx.app.name, 'public');\n      await fse.ensureDir(dir);\n      return dir;\n    }\n\n    // get path\n    async getPath(subdir, ensure) {\n      const rootPath = await this.getRootPath();\n      const dir = path.join(rootPath, ctx.instance.id.toString(), subdir || '');\n      if (ensure) {\n        await fse.ensureDir(dir);\n      }\n      return dir;\n    }\n\n    // alert\n    getAlertUrl({ data }) {\n      return this.getAbsoluteUrl(`/#!/a/base/base/alert?data=${encodeURIComponent(JSON.stringify(data))}`);\n    }\n\n    authProviders() {\n      if (!_authProvidersLocales[ctx.locale]) {\n        _authProvidersLocales[ctx.locale] = this._prepareAuthProviders();\n      }\n      return _authProvidersLocales[ctx.locale];\n    }\n\n    modules() {\n      if (!_modulesLocales[ctx.locale]) {\n        _modulesLocales[ctx.locale] = this._prepareModules();\n      }\n      return _modulesLocales[ctx.locale];\n    }\n\n    locales() {\n      if (!_locales[ctx.locale]) {\n        _locales[ctx.locale] = this._prepareLocales();\n      }\n      return _locales[ctx.locale];\n    }\n\n    atomClasses() {\n      if (!_atomClasses[ctx.locale]) {\n        _atomClasses[ctx.locale] = this._prepareAtomClasses();\n      }\n      return _atomClasses[ctx.locale];\n    }\n\n    atomClass({ module, atomClassName }) {\n      const _atomClasses = this.atomClasses();\n      return _atomClasses[module][atomClassName];\n    }\n\n    actions() {\n      if (!_actions[ctx.locale]) {\n        _actions[ctx.locale] = this._prepareActions();\n      }\n      return _actions[ctx.locale];\n    }\n\n    action({ module, atomClassName, code, name }) {\n      const _actions = this.actions();\n      const actions = _actions[module][atomClassName];\n      if (name) return actions[name];\n      const key = Object.keys(actions).find(key => actions[key].code === code);\n      return actions[key];\n    }\n\n    flags() {\n      if (!_flags[ctx.locale]) {\n        _flags[ctx.locale] = this._prepareFlags();\n      }\n      return _flags[ctx.locale];\n    }\n\n    orders() {\n      if (!_orders[ctx.locale]) {\n        _orders[ctx.locale] = this._prepareOrders();\n      }\n      return _orders[ctx.locale];\n    }\n\n    menus() {\n      if (!_menus[ctx.locale]) {\n        _menus[ctx.locale] = this._prepareMenus();\n      }\n      return _menus[ctx.locale];\n    }\n\n    functions() {\n      if (!_functions[ctx.locale]) {\n        _functions[ctx.locale] = this._prepareFunctions();\n      }\n      return _functions[ctx.locale];\n    }\n\n    function({ module, name }) {\n      const _functions = this.functions();\n      return _functions[module][name];\n    }\n\n    functionsAutoRight({ module, atomClassName, action }) {\n      const functions = {};\n      const _functions = this.functions();\n      for (const key in _functions[module]) {\n        const _func = _functions[module][key];\n        const _action = typeof action === 'string' ? _func.action : ctx.constant.module(moduleInfo.relativeName).atom.action[_func.action];\n        if (_func.autoRight && _func.atomClassName === atomClassName && _action === action) {\n          functions[key] = _func;\n        }\n      }\n      return functions;\n    }\n\n    // inner methods\n\n    _prepareAuthProviders() {\n      const authProviders = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.auth && module.main.meta.auth.providers) {\n          for (const providerName in module.main.meta.auth.providers) {\n            const _authProvider = module.main.meta.auth.providers[providerName];\n            const authProvider = {\n              meta: _authProvider.meta,\n              config: _authProvider.config,\n              handler: _authProvider.handler,\n            };\n            if (authProvider.meta && authProvider.meta.title) {\n              authProvider.meta.titleLocale = ctx.text(authProvider.meta.title);\n            }\n            authProviders[`${relativeName}:${providerName}`] = authProvider;\n          }\n        }\n      }\n      return authProviders;\n    }\n\n    _prepareModules() {\n      const modules = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        const _module = {\n          name: relativeName,\n          title: module.package.title || module.info.name,\n          description: ctx.text(module.package.description),\n          info: module.info,\n        };\n        _module.titleLocale = ctx.text(_module.title);\n        modules[relativeName] = _module;\n      }\n      return modules;\n    }\n\n    _prepareLocales() {\n      const locales = [];\n      const config = ctx.config.module(moduleInfo.relativeName);\n      for (const locale in config.locales) {\n        locales.push({\n          title: ctx.text(config.locales[locale]),\n          value: locale,\n        });\n      }\n      return locales;\n    }\n\n    _prepareAtomClasses() {\n      const atomClasses = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.atoms) {\n          atomClasses[relativeName] = this._prepareAtomClassesModule(module, module.main.meta.base.atoms);\n        }\n      }\n      return atomClasses;\n    }\n\n    _prepareAtomClassesModule(module, _atoms) {\n      const atomClasses = {};\n      for (const key in _atoms) {\n        const _atom = _atoms[key].info;\n        // info\n        const atomClass = {\n          name: key,\n          title: _atom.title || key,\n          public: _atom.public ? 1 : 0,\n          flow: _atom.flow ? 1 : 0,\n        };\n        // tableName\n        for (const key in _atom) {\n          if (key.indexOf('tableName') === 0) {\n            atomClass[key] = _atom[key];\n          }\n        }\n        // titleLocale\n        atomClass.titleLocale = ctx.text(atomClass.title);\n        // ok\n        atomClasses[key] = atomClass;\n      }\n      return atomClasses;\n    }\n\n    _prepareFlags() {\n      const flags = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.atoms) {\n          flags[relativeName] = {};\n          for (const atomClassName in module.main.meta.base.atoms) {\n            flags[relativeName][atomClassName] = this._prepareFlagsAtomClass(module, module.main.meta.base.atoms[atomClassName]);\n          }\n        }\n      }\n      return flags;\n    }\n\n    _prepareFlagsAtomClass(module, atomClass) {\n      const flags = {};\n      const _flags = atomClass.flags;\n      for (const key in _flags) {\n        const flag = {\n          title: _flags[key].title,\n        };\n        flag.titleLocale = ctx.text(flag.title);\n        flags[key] = flag;\n      }\n      return flags;\n    }\n\n    _prepareOrders() {\n      const orders = {};\n      // modules\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.atoms) {\n          orders[relativeName] = {};\n          for (const atomClassName in module.main.meta.base.atoms) {\n            orders[relativeName][atomClassName] = this._prepareOrdersAtomClass(module, module.main.meta.base.atoms[atomClassName]);\n          }\n        }\n      }\n      // base\n      orders.base = this._prepareOrdersBase();\n      // ok\n      return orders;\n    }\n\n    _prepareOrdersAtomClass(module, atomClass) {\n      if (!atomClass.orders) return null;\n      return atomClass.orders.map(item => {\n        return {\n          name: item.name,\n          title: item.title,\n          by: item.by,\n          tableAlias: item.tableAlias || 'f',\n          titleLocale: ctx.text(item.title),\n        };\n      });\n    }\n\n    _prepareOrdersBase() {\n      return constants.atom.orders.map(item => {\n        return {\n          name: item.name,\n          title: item.title,\n          by: item.by,\n          tableAlias: item.tableAlias,\n          titleLocale: ctx.text(item.title),\n        };\n      });\n    }\n\n    _prepareActions() {\n      const actions = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.atoms) {\n          actions[relativeName] = {};\n          for (const atomClassName in module.main.meta.base.atoms) {\n            actions[relativeName][atomClassName] = this._prepareActionsAtomClass(module, module.main.meta.base.atoms[atomClassName]);\n          }\n        }\n      }\n      return actions;\n    }\n\n    _prepareActionsAtomClass(module, atomClass) {\n      const actions = {};\n      const _actions = atomClass.actions;\n      const _actionsSystem = ctx.constant.module(moduleInfo.relativeName).atom.action;\n      const _actionsSystemMeta = ctx.constant.module(moduleInfo.relativeName).atom.actionMeta;\n      //  _actionsSystem\n      for (const key in _actionsSystem) {\n        if (key !== 'custom') {\n          const action = {\n            code: _actionsSystem[key],\n            name: key,\n            title: _actionsSystemMeta[key].title,\n            flag: (_actions && _actions[key] && _actions[key].flag) || '',\n            authorize: _actionsSystemMeta[key].authorize !== false,\n          };\n          if (_actions && _actions[key] && (_actions[key].actionComponent || _actions[key].actionPath)) {\n            // custom\n            action.actionModule = _actions[key].actionModule || module.info.relativeName;\n            action.actionComponent = _actions[key].actionComponent;\n            action.actionPath = _actions[key].actionPath;\n            action.meta = _actions[key].meta;\n          } else {\n            // default\n            action.actionModule = moduleInfo.relativeName;\n            action.actionComponent = _actionsSystemMeta[key].actionComponent;\n            action.actionPath = _actionsSystemMeta[key].actionPath;\n            action.meta = (_actions && _actions[key] && _actions[key].meta) || _actionsSystemMeta[key].meta;\n          }\n          action.titleLocale = ctx.text(action.title);\n          actions[key] = action;\n        }\n      }\n      //  _actions\n      if (_actions) {\n        for (const key in _actions) {\n          if (!_actionsSystem[key]) {\n            const action = {\n              code: _actions[key].code,\n              name: key,\n              title: _actions[key].title || key,\n              flag: _actions[key].flag || '',\n              actionModule: _actions[key].actionModule || module.info.relativeName,\n              actionComponent: _actions[key].actionComponent,\n              actionPath: _actions[key].actionPath,\n              authorize: _actions[key].authorize !== false,\n              meta: _actions[key].meta,\n            };\n            if (!_actions[key].actionComponent && !_actions[key].actionPath) {\n              // default\n              action.actionModule = _actions[key].actionModule || moduleInfo.relativeName;\n              action.actionComponent = 'action';\n              action.actionPath = '';\n            } else {\n              // custom\n              action.actionModule = _actions[key].actionModule || module.info.relativeName;\n              action.actionComponent = _actions[key].actionComponent;\n              action.actionPath = _actions[key].actionPath;\n            }\n            action.titleLocale = ctx.text(action.title);\n            actions[key] = action;\n          }\n        }\n      }\n      return actions;\n    }\n\n    _prepareMenus() {\n      const menus = {};\n      const functions = this._prepareFunctions();\n      for (const relativeName in functions) {\n        const functionsModule = functions[relativeName];\n        menus[relativeName] = {};\n        for (const key in functionsModule) {\n          const func = functionsModule[key];\n          // 2018.12.22 menu maybe 0 for special scene\n          if (func.menu === 1 || (func.actionComponent || func.actionPath)) {\n            menus[relativeName][key] = func;\n          }\n        }\n      }\n      return menus;\n    }\n\n    _prepareFunctions() {\n      const functions = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.functions) {\n          functions[relativeName] = this._prepareFunctionsModule(module, module.main.meta.base.functions);\n        }\n      }\n      return functions;\n    }\n\n    _prepareFunctionsModule(module, _functions) {\n      const functions = {};\n      for (const key in _functions) {\n        const _func = _functions[key];\n        const func = {\n          name: key,\n          title: _func.title || key,\n          scene: _func.scene,\n          autoRight: _func.autoRight || 0,\n          atomClassName: _func.atomClassName,\n          action: _func.action,\n          actionModule: _func.actionModule || module.info.relativeName,\n          actionComponent: _func.actionComponent,\n          actionPath: _func.actionPath,\n          sorting: _func.sorting || 0,\n          menu: _func.menu ? 1 : 0,\n          public: _func.public ? 1 : 0,\n        };\n        func.titleLocale = ctx.text(func.title);\n        // create\n        if (func.action === 'create' && !func.actionComponent && !func.actionPath) {\n          func.actionModule = 'a-base';\n          func.actionComponent = 'action';\n          // func.actionPath = '/a/base/atom/edit?atomId={{atomId}}&itemId={{itemId}}&atomClassId={{atomClassId}}&atomClassName={{atomClassName}}&atomClassIdParent={{atomClassIdParent}}';\n        }\n        // list\n        if (func.action === 'read' && !func.actionComponent && !func.actionPath) {\n          func.actionPath = '/a/base/atom/list?module={{module}}&atomClassName={{atomClassName}}';\n        }\n        // ok\n        functions[key] = func;\n      }\n      return functions;\n    }\n\n  }\n\n  return Base;\n};\n","module.exports = require(\"path\");","module.exports = require(\"os\");","const modelFn = require('../../../model/atomClass.js');\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomClass {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n      this._model = null;\n    }\n\n    // other module's atomClass\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get model() {\n      if (!this._model) this._model = new (modelFn(ctx.app))(ctx);\n      return this._model;\n    }\n\n    async atomClass(atomClass) {\n      atomClass = await this.top(atomClass);\n      return ctx.meta.base.atomClass({ module: atomClass.module, atomClassName: atomClass.atomClassName });\n    }\n\n    async top(atomClass) {\n      while (true) {\n        if (atomClass.atomClassIdParent === 0) break;\n        atomClass = await this.get({ id: atomClass.atomClassIdParent });\n      }\n      return atomClass;\n    }\n\n    async get({ id, module, atomClassName, atomClassIdParent = 0 }) {\n      module = module || this.moduleName;\n      const data = id ? { id } : { module, atomClassName, atomClassIdParent };\n      const res = await this.model.get(data);\n      if (res) return res;\n      if (!module || !atomClassName) throw new Error('Invalid arguments');\n      // queue\n      return await ctx.app.meta.queue.pushAsync({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'registerAtomClass',\n        data: { module, atomClassName, atomClassIdParent },\n      });\n    }\n\n    async register({ module, atomClassName, atomClassIdParent }) {\n      // get\n      const res = await this.model.get({ module, atomClassName, atomClassIdParent });\n      if (res) return res;\n      // data\n      const atomClass = ctx.meta.base.atomClass({ module, atomClassName });\n      if (!atomClass) throw new Error(`atomClass ${module}:${atomClassName} not found!`);\n      const data = {\n        module,\n        atomClassName,\n        atomClassIdParent,\n        public: atomClass.public,\n        flow: atomClass.flow,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n    async getByAtomId({ atomId }) {\n      const res = await this.model.query(`\n        select a.* from aAtomClass a\n          left join aAtom b on a.id=b.atomClassId\n            where b.iid=? and b.id=?\n        `, [ ctx.instance.id, atomId ]);\n      return res[0];\n    }\n\n    async getTopByAtomId({ atomId }) {\n      const atomClass = await this.getByAtomId({ atomId });\n      return await this.top(atomClass);\n    }\n\n    async validator({ atomClass, user }) {\n      // maybe empty\n      user = user || ctx.user.op;\n      // event\n      const res = await ctx.meta.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'atomClassValidator',\n        data: {\n          atomClass, user,\n        },\n      });\n      if (res) return res;\n      // default\n      const _module = ctx.app.meta.modules[atomClass.module];\n      const validator = _module.main.meta.base.atoms[atomClass.atomClassName].validator;\n      return validator ? {\n        module: atomClass.module,\n        validator,\n      } : null;\n    }\n\n    async validatorSearch({ atomClass }) {\n      const _module = ctx.app.meta.modules[atomClass.module];\n      const validator = _module.main.meta.base.atoms[atomClass.atomClassName].search.validator;\n      return validator ? {\n        module: atomClass.module,\n        validator,\n      } : null;\n    }\n\n  }\n\n  return AtomClass;\n};\n","const modelFn = require('../../../model/atomAction.js');\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomAction {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n      this._model = null;\n    }\n\n    // other module's atomAction\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get model() {\n      if (!this._model) this._model = new (modelFn(ctx.app))(ctx);\n      return this._model;\n    }\n\n    async get({ id, atomClassId, code }) {\n      const data = id ? { id } : { atomClassId, code };\n      const res = await this.model.get(data);\n      if (res) return res;\n      // queue\n      return await ctx.app.meta.queue.pushAsync({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'registerAtomAction',\n        data: { atomClassId, code },\n      });\n    }\n\n    async getFlagByAtomId({ atomId, code, name }) {\n      const atomClass = await ctx.meta.atomClass.getTopByAtomId({ atomId });\n      const action = ctx.meta.base.action({ module: atomClass.module, atomClassName: atomClass.atomClassName, code, name });\n      return action.flag.toString();\n    }\n\n    async register({ atomClassId, code }) {\n      // get\n      const res = await this.model.get({ atomClassId, code });\n      if (res) return res;\n      const atomClass = await ctx.meta.atomClass.get({ id: atomClassId });\n      const action = ctx.meta.base.action({ module: atomClass.module, atomClassName: atomClass.atomClassName, code });\n      const data = {\n        atomClassId,\n        code,\n        name: action.name,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n  }\n\n  return AtomAction;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\nconst modelAtomFn = require('../../../model/atom.js');\nconst modelAtomStarFn = require('../../../model/atomStar.js');\nconst modelAtomLabelFn = require('../../../model/atomLabel.js');\nconst modelAtomLabelRefFn = require('../../../model/atomLabelRef.js');\nconst sqlProcedureFn = require('../../sql/procedure.js');\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n      this._atomClass = null;\n      this._modelAtom = null;\n      this._modelAtomStar = null;\n      this._modelAtomLabel = null;\n      this._modelAtomLabelRef = null;\n      this._sequence = null;\n      this._sqlProcedure = null;\n    }\n\n    // other module's atom\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get atomClass() {\n      if (!this._atomClass) this._atomClass = ctx.meta.atomClass.module(this.moduleName);\n      return this._atomClass;\n    }\n\n    get modelAtom() {\n      if (!this._modelAtom) this._modelAtom = new (modelAtomFn(ctx.app))(ctx);\n      return this._modelAtom;\n    }\n\n    get modelAtomStar() {\n      if (!this._modelAtomStar) this._modelAtomStar = new (modelAtomStarFn(ctx.app))(ctx);\n      return this._modelAtomStar;\n    }\n\n    get modelAtomLabel() {\n      if (!this._modelAtomLabel) this._modelAtomLabel = new (modelAtomLabelFn(ctx.app))(ctx);\n      return this._modelAtomLabel;\n    }\n\n    get modelAtomLabelRef() {\n      if (!this._modelAtomLabelRef) this._modelAtomLabelRef = new (modelAtomLabelRefFn(ctx.app))(ctx);\n      return this._modelAtomLabelRef;\n    }\n\n    get sequence() {\n      if (!this._sequence) this._sequence = ctx.meta.sequence.module(moduleInfo.relativeName);\n      return this._sequence;\n    }\n\n    get sqlProcedure() {\n      if (!this._sqlProcedure) this._sqlProcedure = new (sqlProcedureFn(ctx))();\n      return this._sqlProcedure;\n    }\n\n    async getAtomClassId({ module, atomClassName, atomClassIdParent = 0 }) {\n      const res = await this.atomClass.get({\n        module,\n        atomClassName,\n        atomClassIdParent,\n      });\n      return res.id;\n    }\n\n    // atom and item\n\n    // create\n    async create({ atomClass, item, user }) {\n      // atomClass\n      atomClass = await ctx.meta.atomClass.get(atomClass);\n      // item\n      item = item || { };\n      if (!item.atomName) {\n        // draftId\n        const draftId = await this.sequence.next('draft');\n        item.atomName = `${ctx.text('Draft')}-${draftId}`;\n      }\n      const atomId = await this._add({\n        atomClass,\n        atom: item,\n        user,\n      });\n\n      // add item\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const res = await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${atomClass.atomClassName}/create`,\n        body: {\n          atomClass,\n          key: { atomId },\n          item,\n          user,\n        },\n      });\n      const itemId = res.itemId;\n\n      // save itemId\n      const atomFlow = item.atomFlow === undefined ? atomClass.flow : item.atomFlow;\n      await this._update({\n        atom: {\n          id: atomId,\n          itemId,\n          atomName: item.atomName,\n          atomFlow,\n        },\n        user,\n      });\n\n      return { atomId, itemId };\n    }\n\n    // read\n    async read({ key, user }) {\n      const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n      const _atomClass = await ctx.meta.atomClass.atomClass(atomClass);\n      // get\n      const item = await this._get({\n        atom: {\n          id: key.atomId,\n          tableName: _atomClass.tableNameFull || _atomClass.tableName,\n        },\n        user,\n      });\n      if (!item) return null;\n\n      // itemId\n      key.itemId = item.id;\n\n      // read item\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${atomClass.atomClassName}/read`,\n        body: {\n          atomClass,\n          key,\n          item,\n          user,\n        },\n      });\n\n      return item;\n    }\n\n    // select\n    async select({ atomClass, options, user, pageForce = true }) {\n      // atomClass\n      let _atomClass;\n      if (atomClass) {\n        atomClass = await ctx.meta.atomClass.get(atomClass);\n        _atomClass = await ctx.meta.atomClass.atomClass(atomClass);\n      }\n      // tableName\n      let tableName = '';\n      if (_atomClass) {\n        tableName = this._getTableName({ atomClass: _atomClass, mode: options.mode });\n        // 'where' should append atomClassId, such as article/post using the same table\n        if (!options.where) options.where = {};\n        options.where.atomClassId = atomClass.id;\n      }\n      // select\n      const items = await this._list({\n        tableName,\n        options,\n        user,\n        pageForce,\n      });\n\n      // select items\n      if (atomClass) {\n        const _moduleInfo = mparse.parseInfo(atomClass.module);\n        await ctx.performAction({\n          method: 'post',\n          url: `/${_moduleInfo.url}/${atomClass.atomClassName}/select`,\n          body: {\n            atomClass,\n            options,\n            items,\n            user,\n          },\n        });\n      }\n\n      return items;\n    }\n\n    // write\n    async write({ key, item, user }) {\n      const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n\n      // write item\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${atomClass.atomClassName}/write`,\n        body: {\n          atomClass,\n          key,\n          item,\n          user,\n        },\n      });\n\n      // write atom only after item writed\n      await this._writeAtom({ key, item, user });\n    }\n\n    async _writeAtom({ key, item, user }) {\n      // write atom\n      if (item) {\n        const atom = { };\n        if (item.atomName !== undefined) atom.atomName = item.atomName;\n        if (item.allowComment !== undefined) atom.allowComment = item.allowComment;\n        if (Object.keys(atom).length > 0) {\n          atom.id = key.atomId;\n          await this._update({\n            atom,\n            user,\n          });\n        }\n      }\n    }\n\n    // delete\n    async delete({ key, user }) {\n      const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n      // delete item\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${atomClass.atomClassName}/delete`,\n        body: {\n          atomClass,\n          key,\n          user,\n        },\n      });\n\n      // delete atom and item\n      await this._delete({\n        atom: {\n          id: key.atomId,\n        },\n        user,\n      });\n    }\n\n    // action\n    async action({ action, key, user }) {\n      const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      return await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${atomClass.atomClassName}/action`,\n        body: {\n          action,\n          atomClass,\n          key,\n          user,\n        },\n      });\n    }\n\n    async enable({ key, atom: { atomEnabled = 1 }, user }) {\n      const _atom = await this.modelAtom.get({ id: key.atomId });\n      if (_atom.atomEnabled === atomEnabled) return;\n      // update\n      const res = await this.modelAtom.update({\n        id: key.atomId,\n        atomEnabled,\n        userIdUpdated: user.id,\n      });\n      if (res.affectedRows !== 1) ctx.throw.module(moduleInfo.relativeName, 1003);\n      _atom.atomEnabled = atomEnabled;\n      // enable item\n      const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${atomClass.atomClassName}/enable`,\n        body: {\n          atomClass,\n          key,\n          atom: _atom,\n          user,\n        },\n      });\n    }\n\n    // atom other functions\n\n    async get({ atomId }) {\n      return await this.modelAtom.get({ id: atomId });\n    }\n\n    async flag({ key, atom: { atomFlag }, user }) {\n      const res = await this.modelAtom.update({\n        id: key.atomId,\n        atomFlag,\n        userIdUpdated: user.id,\n      });\n      if (res.affectedRows !== 1) ctx.throw.module(moduleInfo.relativeName, 1003);\n    }\n\n    async flow({ key, atom: { atomFlow }, user }) {\n      const res = await this.modelAtom.update({\n        id: key.atomId,\n        atomFlow,\n        userIdUpdated: user.id,\n      });\n      if (res.affectedRows !== 1) ctx.throw.module(moduleInfo.relativeName, 1003);\n    }\n\n    async star({ key, atom: { star = 1 }, user }) {\n      let diff = 0;\n      // check if exists\n      const _star = await this.modelAtomStar.get({\n        userId: user.id,\n        atomId: key.atomId,\n      });\n      if (_star && !star) {\n        diff = -1;\n        // delete\n        await this.modelAtomStar.delete({\n          id: _star.id,\n        });\n      } else if (!_star && star) {\n        diff = 1;\n        // new\n        await this.modelAtomStar.insert({\n          userId: user.id,\n          atomId: key.atomId,\n          star: 1,\n        });\n      }\n      // get\n      const atom = await this.get({ atomId: key.atomId });\n      let starCount = atom.starCount;\n      if (diff !== 0) {\n        starCount += diff;\n        await this.modelAtom.update({\n          id: key.atomId,\n          starCount,\n          // userIdUpdated: user.id,\n        });\n      }\n      // ok\n      return { star, starCount };\n    }\n\n    async readCount({ key, atom: { readCount = 1 }, user }) {\n      await this.modelAtom.query('update aAtom set readCount = readCount + ? where iid=? and id=?',\n        [ readCount, ctx.instance.id, key.atomId ]);\n    }\n\n    async comment({ key, atom: { comment = 1 }, user }) {\n      await this.modelAtom.query('update aAtom set commentCount = commentCount + ? where iid=? and id=?',\n        [ comment, ctx.instance.id, key.atomId ]);\n    }\n\n    async attachment({ key, atom: { attachment = 1 }, user }) {\n      await this.modelAtom.query('update aAtom set attachmentCount = attachmentCount + ? where iid=? and id=?',\n        [ attachment, ctx.instance.id, key.atomId ]);\n    }\n\n    async labels({ key, atom: { labels = null }, user }) {\n      // force delete\n      await this.modelAtomLabel.delete({\n        userId: user.id,\n        atomId: key.atomId,\n      });\n      await this.modelAtomLabelRef.delete({\n        userId: user.id,\n        atomId: key.atomId,\n      });\n      // new\n      if (labels && labels.length > 0) {\n        await this.modelAtomLabel.insert({\n          userId: user.id,\n          atomId: key.atomId,\n          labels: JSON.stringify(labels),\n        });\n        for (const labelId of labels) {\n          await this.modelAtomLabelRef.insert({\n            userId: user.id,\n            atomId: key.atomId,\n            labelId,\n          });\n        }\n      }\n    }\n\n    async actions({ key, basic, user }) {\n      // atomClass\n      const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n      // actions\n      const _basic = basic ? 'and a.code<100' : '';\n      const sql = `\n        select a.*,b.module,b.atomClassName from aAtomAction a\n          left join aAtomClass b on a.atomClassId=b.id\n            where a.iid=? and a.deleted=0 and a.atomClassId=? ${_basic}\n              order by a.code asc\n      `;\n      const actions = await ctx.model.query(sql, [ ctx.instance.id, atomClass.id ]);\n      // actions res\n      const actionsRes = [];\n      const _actionsSystem = ctx.constant.module(moduleInfo.relativeName).atom.action;\n      for (const action of actions) {\n        if (action.code === _actionsSystem.write || action.code === _actionsSystem.delete) {\n          const res = await this.checkRightUpdate({ atom: { id: key.atomId, action: action.code }, user });\n          if (res) actionsRes.push(action);\n        } else if (action.code > _actionsSystem.custom) {\n          const res = await this.checkRightAction({ atom: { id: key.atomId, action: action.code }, user });\n          if (res) actionsRes.push(action);\n        }\n      }\n      return actionsRes;\n    }\n\n    async schema({ atomClass, schema, user }) {\n      const validator = await this.validator({ atomClass, user });\n      if (!validator) return null;\n      const _schema = ctx.meta.validation.getSchema({ module: validator.module, validator: validator.validator, schema });\n      return {\n        module: validator.module,\n        validator: validator.validator,\n        schema: _schema,\n      };\n    }\n\n    async validator({ atomClass: { id }, user }) {\n      let atomClass = await this.atomClass.get({ id });\n      atomClass = await this.atomClass.top(atomClass);\n      return await this.atomClass.validator({ atomClass, user });\n    }\n\n    // atom\n\n    async _add({\n      atomClass: { id, atomClassName, atomClassIdParent = 0 },\n      atom: { itemId, atomName, atomFlag = 0, atomFlow = 0 },\n      user,\n    }) {\n      let atomClassId = id;\n      if (!atomClassId) atomClassId = await this.getAtomClassId({ atomClassName, atomClassIdParent });\n      const res = await this.modelAtom.insert({\n        atomEnabled: 0, // must be enabled by enable\n        atomFlag,\n        atomFlow,\n        itemId,\n        atomClassId,\n        atomName,\n        userIdCreated: user.id,\n        userIdUpdated: user.id,\n      });\n      return res.insertId;\n    }\n\n    async _update({\n      atom: { id, atomName, allowComment, atomFlow, itemId },\n      user,\n    }) {\n      const params = { id, userIdUpdated: user.id };\n      if (atomName !== undefined) params.atomName = atomName;\n      if (allowComment !== undefined) params.allowComment = allowComment;\n      if (atomFlow !== undefined) params.atomFlow = atomFlow;\n      if (itemId !== undefined) params.itemId = itemId;\n      params.updatedAt = new Date();\n      const res = await this.modelAtom.update(params);\n      if (res.affectedRows !== 1) ctx.throw.module(moduleInfo.relativeName, 1003);\n    }\n\n    async _delete({\n      atom,\n      user,\n    }) {\n      await this._update({ atom, user });\n      await this.modelAtom.delete(atom);\n    }\n\n    async _get({\n      atom: { id, tableName },\n      user,\n    }) {\n      const sql = this.sqlProcedure.getAtom({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        tableName, atomId: id,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async _list({ tableName, options: { where, orders, page, star = 0, label = 0, comment = 0, file = 0 }, user, pageForce = true }) {\n      page = ctx.meta.util.page(page, pageForce);\n\n      const sql = this.sqlProcedure.selectAtoms({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        tableName, where, orders, page,\n        star, label, comment, file,\n      });\n      return await ctx.model.query(sql);\n    }\n\n    // right\n\n    async checkRoleRightRead({\n      atom: { id },\n      roleId,\n    }) {\n      const res = await ctx.model.query('call aCheckRoleRightRead(?,?,?)',\n        [ ctx.instance.id, roleId, id ]\n      );\n      return res[0][0];\n    }\n\n    async checkRightRead({\n      atom: { id },\n      user,\n    }) {\n      const sql = this.sqlProcedure.checkRightRead({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomId: id,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async checkRightUpdate({\n      atom: { id, action },\n      user,\n    }) {\n      const actionFlag = await ctx.meta.atomAction.getFlagByAtomId({ atomId: id, code: action });\n      const sql = this.sqlProcedure.checkRightUpdate({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomId: id,\n        action, actionFlag,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async checkRightAction({\n      atom: { id, action },\n      user,\n    }) {\n      const actionFlag = await ctx.meta.atomAction.getFlagByAtomId({ atomId: id, code: action });\n      const sql = this.sqlProcedure.checkRightAction({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomId: id,\n        action, actionFlag,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async checkRightCreate({\n      atomClass: { id, module, atomClassName, atomClassIdParent = 0 },\n      user,\n    }) {\n      if (!id) id = await this.getAtomClassId({ module, atomClassName, atomClassIdParent });\n      const sql = this.sqlProcedure.checkRightCreate({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomClassId: id,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    _upperCaseFirstChar(str) {\n      if (!str) return '';\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    }\n\n    _getTableName({ atomClass, mode }) {\n      mode = this._upperCaseFirstChar(mode);\n      if (mode === 'Search') {\n        return atomClass.tableNameSearch || atomClass.tableNameFull || atomClass.tableName;\n      }\n      // special: all = list + atomEnabled=0\n      return atomClass[`tableName${mode}`] || atomClass.tableName;\n    }\n\n  }\n\n  return Atom;\n};\n","const modelFn = require('../../../model/function.js');\nconst modelFunctionStarFn = require('../../../model/functionStar.js');\nconst modelFunctionLocaleFn = require('../../../model/functionLocale.js');\nconst sqlProcedureFn = require('../../sql/procedure.js');\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Function {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n      this._model = null;\n      this._modelFunctionStar = null;\n      this._modelFunctionLocale = null;\n      this._sqlProcedure = null;\n    }\n\n    // other module's menu\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get model() {\n      if (!this._model) this._model = new (modelFn(ctx.app))(ctx);\n      return this._model;\n    }\n\n    get modelFunctionStar() {\n      if (!this._modelFunctionStar) this._modelFunctionStar = new (modelFunctionStarFn(ctx.app))(ctx);\n      return this._modelFunctionStar;\n    }\n\n    get modelFunctionLocale() {\n      if (!this._modelFunctionLocale) this._modelFunctionLocale = new (modelFunctionLocaleFn(ctx.app))(ctx);\n      return this._modelFunctionLocale;\n    }\n\n    get sqlProcedure() {\n      if (!this._sqlProcedure) this._sqlProcedure = new (sqlProcedureFn(ctx))();\n      return this._sqlProcedure;\n    }\n\n    // list\n    //   locale maybe '' for selectAllFunctions beside menus\n    async list({ options: { where, orders, page, star = 0, locale = '' }, user }) {\n      // page = ctx.meta.util.page(page); // has set in controller\n\n      // check locale\n      if (locale) await this.checkLocale({ locale });\n\n      // sql\n      const sql = this.sqlProcedure.selectFunctions({\n        iid: ctx.instance.id,\n        locale,\n        userIdWho: user.id,\n        where, orders, page, star,\n      });\n      // select\n      return await ctx.model.query(sql);\n    }\n\n    async star({ id, star = 1, user }) {\n      // force delete\n      await this.modelFunctionStar.delete({\n        userId: user.id,\n        functionId: id,\n      });\n      // new\n      if (star) {\n        await this.modelFunctionStar.insert({\n          userId: user.id,\n          functionId: id,\n          star: 1,\n        });\n      }\n    }\n\n    async check({ functions, user }) {\n      for (const func of functions) {\n        const res = await this.checkRightFunction({ function: func, user });\n        func.passed = !!res;\n      }\n      return functions;\n    }\n\n    //\n\n    async delete({ id, module, name }) {\n      if (id) {\n        await this.model.delete({ id });\n      } else {\n        module = module || this.moduleName;\n        await this.model.delete({ module, name });\n      }\n    }\n\n    async get({ id, module, name }) {\n      if (id) return await this.model.get({ id });\n      module = module || this.moduleName;\n      const res = await this.model.get({ module, name });\n      if (res) return res;\n      // queue\n      return await ctx.app.meta.queue.pushAsync({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'registerFunction',\n        data: { module, name },\n      });\n    }\n\n    async register({ module, name }) {\n      module = module || this.moduleName;\n      // get\n      const res = await this.model.get({ module, name });\n      if (res) return res;\n      const func = ctx.meta.base.function({ module, name });\n      let atomClassId = 0;\n      if (func.atomClassName) {\n        const atomClass = await ctx.meta.atomClass.get({ module, atomClassName: func.atomClassName });\n        atomClassId = atomClass.id;\n      }\n      const data = {\n        module,\n        name: func.name,\n        title: func.title,\n        scene: ctx.constant.module(moduleInfo.relativeName).function.scene[func.scene],\n        autoRight: func.autoRight,\n        atomClassId,\n        action: func.action ? ctx.constant.module(moduleInfo.relativeName).atom.action[func.action] : 0,\n        sorting: func.sorting,\n        menu: func.menu,\n        public: func.public,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n    async checkRightFunction({\n      function: { module, name },\n      user,\n    }) {\n      const func = await this.get({ module, name });\n      const sql = this.sqlProcedure.checkRightFunction({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        functionId: func.id,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async _checkFunctionLocales({ locale }) {\n      locale = locale || ctx.locale;\n      const sql = this.sqlProcedure.checkFunctionLocales({\n        iid: ctx.instance.id,\n        locale,\n      });\n      return await ctx.model.query(sql);\n    }\n\n    async checkLocale({ locale }) {\n      const res = await this._checkFunctionLocales({ locale });\n      if (res.length === 0) return;\n      // queue\n      await ctx.app.meta.queue.pushAsync({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'checkFunctionLocale',\n        data: { locale },\n      });\n    }\n\n    async _checkLocale({ locale }) {\n      const res = await this._checkFunctionLocales({ locale });\n      if (res.length === 0) return;\n      // insert locales\n      for (const menu of res) {\n        const titleLocale = ctx.text.locale(locale, menu.title);\n        await this.modelFunctionLocale.insert({\n          functionId: menu.id,\n          locale,\n          titleLocale,\n        });\n      }\n    }\n\n    async clearLocales() {\n      await this.modelFunctionLocale.delete();\n    }\n\n  }\n\n  return Function;\n};\n","const modelFn = require('../../../model/role.js');\nconst modelRoleIncFn = require('../../../model/roleInc.js');\nconst modelUserRoleFn = require('../../../model/userRole.js');\nconst modelRoleRightFn = require('../../../model/roleRight.js');\nconst modelRoleRightRefFn = require('../../../model/roleRightRef.js');\nconst modelFunctionFn = require('../../../model/function.js');\nconst modelRoleFunctionFn = require('../../../model/roleFunction.js');\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Role {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n      this._model = null;\n      this._modelRoleInc = null;\n      this._modelUserRole = null;\n      this._modelRoleRight = null;\n      this._modelRoleRightRef = null;\n      this._modelFunction = null;\n      this._modelRoleFunction = null;\n    }\n\n    // other module's role\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    get model() {\n      if (!this._model) this._model = new (modelFn(ctx.app))(ctx);\n      return this._model;\n    }\n\n    get modelRoleInc() {\n      if (!this._modelRoleInc) this._modelRoleInc = new (modelRoleIncFn(ctx.app))(ctx);\n      return this._modelRoleInc;\n    }\n\n    get modelUserRole() {\n      if (!this._modelUserRole) this._modelUserRole = new (modelUserRoleFn(ctx.app))(ctx);\n      return this._modelUserRole;\n    }\n\n    get modelRoleRight() {\n      if (!this._modelRoleRight) this._modelRoleRight = new (modelRoleRightFn(ctx.app))(ctx);\n      return this._modelRoleRight;\n    }\n\n    get modelRoleRightRef() {\n      if (!this._modelRoleRightRef) this._modelRoleRightRef = new (modelRoleRightRefFn(ctx.app))(ctx);\n      return this._modelRoleRightRef;\n    }\n\n    get modelFunction() {\n      if (!this._modelFunction) this._modelFunction = new (modelFunctionFn(ctx.app))(ctx);\n      return this._modelFunction;\n    }\n\n    get modelRoleFunction() {\n      if (!this._modelRoleFunction) this._modelRoleFunction = new (modelRoleFunctionFn(ctx.app))(ctx);\n      return this._modelRoleFunction;\n    }\n\n    async get(where) {\n      return await this.model.get(where);\n    }\n\n    async getSystemRole({ roleName }) {\n      return await this.get({\n        roleName,\n        system: 1,\n      });\n    }\n\n    // add role\n    async add({ roleName = '', leader = 0, catalog = 0, system = 0, sorting = 0, roleIdParent = 0 }) {\n      const res = await this.model.insert({\n        roleName,\n        leader,\n        catalog,\n        system,\n        sorting,\n        roleIdParent,\n      });\n      const roleId = res.insertId;\n\n      // set dirty\n      await this.setDirty(true);\n\n      return roleId;\n    }\n\n    async move({ roleId, roleIdParent }) {\n      // role\n      const role = await this.get({ id: roleId });\n      if (role.roleIdParent === roleIdParent) return;\n\n      // update\n      await this.model.update({ id: roleId, roleIdParent });\n\n      // set dirty\n      await this.setDirty(true);\n    }\n\n    async delete({ roleId }) {\n      // role\n      const role = await this.get({ id: roleId });\n\n      // check if system\n      if (role.system) ctx.throw(403);\n      // check if children\n      if (role.catalog) {\n        const children = await this.children({ roleId });\n        if (children.length > 0) ctx.throw.module(moduleInfo.relativeName, 1008);\n      }\n\n      // delete all includes\n      await this.modelRoleInc.delete({ roleId });\n      await this.modelRoleInc.delete({ roleIdInc: roleId });\n\n      // delete all users\n      await this.modelUserRole.delete({ roleId });\n\n      // delete all atom rights\n      await this.modelRoleRight.delete({ roleId });\n      await this.modelRoleRightRef.delete({ roleId });\n\n      // delete all function rights\n      await this.modelRoleFunction.delete({ roleId });\n\n      // delete this\n      await this.model.delete({ id: roleId });\n\n      // set dirty\n      await this.setDirty(true);\n    }\n\n    // add role include\n    async addRoleInc({ roleId, roleIdInc }) {\n      const res = await this.modelRoleInc.insert({\n        roleId,\n        roleIdInc,\n      });\n      const id = res.insertId;\n\n      // set dirty\n      await this.setDirty(true);\n\n      return id;\n    }\n\n    // remove role include\n    async removeRoleInc({ id }) {\n      await this.modelRoleInc.delete({ id });\n\n      // set dirty\n      await this.setDirty(true);\n    }\n\n    // add user role\n    async addUserRole({ userId, roleId }) {\n      const res = await this.modelUserRole.insert({\n        userId, roleId,\n      });\n      return res.insertId;\n    }\n\n    async deleteUserRole({ id, userId, roleId }) {\n      if (!id) {\n        const item = await this.modelUserRole.get({\n          userId, roleId,\n        });\n        if (!item) return;\n        id = item.id;\n      }\n      await this.modelUserRole.delete({ id });\n    }\n\n    async deleteAllUserRoles({ userId }) {\n      await this.modelUserRole.delete({ userId });\n    }\n\n    // add role right\n    async addRoleRight({ roleId, atomClassId, action, scope }) {\n      if (scope) {\n        if (typeof scope === 'string') {\n          scope = scope.split(',');\n        } else if (!Array.isArray(scope)) {\n          scope = [ scope ];\n        }\n      }\n      // force action exists in db\n      await ctx.meta.atomAction.get({ atomClassId, code: action });\n\n      // roleRight\n      const res = await this.modelRoleRight.insert({\n        roleId,\n        atomClassId,\n        action,\n        scope: JSON.stringify(scope),\n      });\n      const roleRightId = res.insertId;\n      // roleRightRef\n      if (scope) {\n        for (const roleIdScope of scope) {\n          await this.modelRoleRightRef.insert({\n            roleRightId,\n            roleId,\n            atomClassId,\n            action,\n            roleIdScope,\n          });\n        }\n      }\n      // insert into roleFunction if action=create/read\n      const constant = ctx.constant.module(moduleInfo.relativeName);\n      if (action === constant.atom.action.create || action === constant.atom.action.read) {\n        const atomClass = await ctx.meta.atomClass.get({ id: atomClassId });\n        const functions = ctx.meta.base.functionsAutoRight({\n          module: atomClass.module,\n          atomClassName: atomClass.atomClassName,\n          action });\n        for (const key in functions) {\n          const func = await ctx.meta.function.get({ module: atomClass.module, name: functions[key].name });\n          await this.addRoleFunction({\n            roleId,\n            functionId: func.id,\n            roleRightId,\n          });\n        }\n      }\n\n      return roleRightId;\n    }\n\n    // delete role right\n    async deleteRoleRight({ id }) {\n      await this.modelRoleRight.delete({ id });\n      await this.modelRoleRightRef.delete({ roleRightId: id });\n      await this.modelRoleFunction.delete({ roleRightId: id });\n    }\n\n    // add role function\n    async addRoleFunction({ roleId, functionId, roleRightId = 0 }) {\n      await this.modelRoleFunction.insert({\n        roleId,\n        functionId,\n        roleRightId,\n      });\n    }\n\n    // delete role function\n    async deleteRoleFunction({ id }) {\n      await this.modelRoleFunction.delete({ id });\n    }\n\n    // children\n    async children({ roleId, page }) {\n      page = ctx.meta.util.page(page, false);\n      // roleId\n      if (!roleId || roleId === 'root') {\n        roleId = 0;\n      }\n      // select\n      const options = {\n        where: { roleIdParent: roleId },\n        orders: [[ 'sorting', 'asc' ], [ 'roleName', 'asc' ]],\n      };\n      if (page.size !== 0) {\n        options.limit = page.size;\n        options.offset = page.index;\n      }\n      return await this.model.select(options);\n    }\n\n    // save\n    async save({ roleId, data: { roleName, leader, sorting } }) {\n      const role = await this.get({ id: roleId });\n      role.roleName = roleName;\n      role.leader = leader;\n      role.sorting = sorting;\n      await this.model.update(role);\n    }\n\n    // includes\n    async includes({ roleId, page }) {\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      return await ctx.model.query(`\n        select a.*,b.roleName from aRoleInc a\n          left join aRole b on a.roleIdInc=b.id\n            where a.iid=? and a.roleId=?\n            ${_limit}\n        `, [ ctx.instance.id, roleId ]);\n    }\n\n    // role rights\n    async roleRights({ roleId, page }) {\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const list = await ctx.model.query(`\n        select a.*,b.module,b.atomClassName,c.name as actionName from aRoleRight a\n          left join aAtomClass b on a.atomClassId=b.id\n          left join aAtomAction c on a.atomClassId=c.atomClassId and a.action=c.code\n            where a.iid=? and a.roleId=?\n            order by b.module,a.atomClassId,a.action\n            ${_limit}\n        `, [ ctx.instance.id, roleId ]);\n      // scope\n      for (const item of list) {\n        const scope = JSON.parse(item.scope);\n        item.scopeRoles = await this._scopeRoles({ scope });\n      }\n      return list;\n    }\n\n    // role spreads\n    async roleSpreads({ roleId, page }) {\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const list = await ctx.model.query(`\n        select d.*,d.id as roleExpandId,a.id as roleRightId,a.scope,b.module,b.atomClassName,c.code as actionCode,c.name as actionName,e.roleName from aRoleRight a\n          left join aAtomClass b on a.atomClassId=b.id\n          left join aAtomAction c on a.atomClassId=c.atomClassId and a.action=c.code\n          left join aRoleExpand d on a.roleId=d.roleIdBase\n          left join aRole e on d.roleIdBase=e.id\n            where d.iid=? and d.roleId=?\n            order by b.module,a.atomClassId,a.action\n            ${_limit}\n        `, [ ctx.instance.id, roleId ]);\n      // scope\n      for (const item of list) {\n        const scope = JSON.parse(item.scope);\n        item.scopeRoles = await this._scopeRoles({ scope });\n      }\n      return list;\n    }\n\n    // atom rights of user\n    async atomRightsOfUser({ userId, page }) {\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const list = await ctx.model.query(`\n        select a.*,b.module,b.atomClassName,c.code as actionCode,c.name as actionName,e.roleName from aViewUserRightAtomClass a\n          left join aAtomClass b on a.atomClassId=b.id\n          left join aAtomAction c on a.atomClassId=c.atomClassId and a.action=c.code\n          left join aRole e on a.roleIdBase=e.id\n            where a.iid=? and a.userIdWho=?\n            order by b.module,a.atomClassId,a.action\n            ${_limit}\n        `, [ ctx.instance.id, userId ]);\n      // scope\n      for (const item of list) {\n        const scope = JSON.parse(item.scope);\n        item.scopeRoles = await this._scopeRoles({ scope });\n      }\n      return list;\n    }\n\n    async _scopeRoles({ scope }) {\n      if (!scope || scope.length === 0) return null;\n      return await ctx.model.query(`\n            select a.* from aRole a\n              where a.iid=? and a.id in (${scope.join(',')})\n            `, [ ctx.instance.id ]);\n    }\n\n    // function rights\n    async functionRights({ menu, roleId, page }) {\n      // check locale\n      const locale = ctx.locale;\n      if (locale) await ctx.meta.function.checkLocale({ locale });\n      // list\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const list = await ctx.model.query(`\n        select a.*,b.module,b.name,b.title,b.scene,b.sorting${menu ? ',f.titleLocale' : ''} from aRoleFunction a\n          left join aFunction b on a.functionId=b.id\n          ${menu ? 'left join aFunctionLocale f on a.functionId=f.functionId' : ''}\n            where a.iid=? and a.roleId=? and b.menu=? ${menu ? 'and f.locale=\\'' + locale + '\\'' : ''}\n            order by b.module,b.scene,b.sorting\n            ${_limit}\n        `, [ ctx.instance.id, roleId, menu ]);\n      return list;\n    }\n\n    // function spreads\n    async functionSpreads({ menu, roleId, page }) {\n      // check locale\n      const locale = ctx.locale;\n      if (locale) await ctx.meta.function.checkLocale({ locale });\n      // list\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const list = await ctx.model.query(`\n        select d.*,d.id as roleExpandId,a.id as roleFunctionId,b.module,b.name,b.title,b.scene,e.roleName${menu ? ',f.titleLocale' : ''} from aRoleFunction a\n          left join aFunction b on a.functionId=b.id\n          left join aRoleExpand d on a.roleId=d.roleIdBase\n          left join aRole e on d.roleIdBase=e.id\n          ${menu ? 'left join aFunctionLocale f on a.functionId=f.functionId' : ''}\n            where d.iid=? and d.roleId=? and b.menu=? ${menu ? 'and f.locale=\\'' + locale + '\\'' : ''}\n            order by b.module,b.scene,b.sorting\n            ${_limit}\n        `, [ ctx.instance.id, roleId, menu ]);\n      return list;\n    }\n\n    // function rights of user\n    async functionRightsOfUser({ menu, userId, page }) {\n      // check locale\n      const locale = ctx.locale;\n      if (locale) await ctx.meta.function.checkLocale({ locale });\n      // list\n      page = ctx.meta.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const list = await ctx.model.query(`\n        select a.*,b.module,b.name,b.title,b.scene,b.sorting${menu ? ',f.titleLocale' : ''},e.roleName from aViewUserRightFunction a\n          left join aFunction b on a.functionId=b.id\n          ${menu ? 'left join aFunctionLocale f on a.functionId=f.functionId' : ''}\n          left join aRole e on a.roleIdBase=e.id\n            where a.iid=? and a.userIdWho=? and b.menu=? ${menu ? 'and f.locale=\\'' + locale + '\\'' : ''}\n            order by b.module,b.scene,b.sorting\n            ${_limit}\n        `, [ ctx.instance.id, userId, menu ]);\n\n      return list;\n    }\n\n    async getUserRolesDirect({ userId }) {\n      const list = await ctx.model.query(`\n        select a.* from aRole a\n          left join aUserRole b on a.id=b.roleId\n            where a.iid=? and b.userId=?\n        `, [ ctx.instance.id, userId ]);\n      return list;\n    }\n\n    async getUserRolesParent({ userId }) {\n      const list = await ctx.model.query(`\n        select a.* from aRole a\n          left join aViewUserRoleRef b on a.id=b.roleIdParent\n            where a.iid=? and b.userId=?\n        `, [ ctx.instance.id, userId ]);\n      return list;\n    }\n\n    async getUserRolesExpand({ userId }) {\n      const list = await ctx.model.query(`\n        select a.* from aRole a\n          left join aViewUserRoleExpand b on a.id=b.roleIdBase\n            where a.iid=? and b.userId=?\n        `, [ ctx.instance.id, userId ]);\n      return list;\n    }\n\n    async userInRoleDirect({ userId, roleId }) {\n      const list = await ctx.model.query(`\n        select count(*) as count from aUserRole a\n          where a.iid=? and a.userId=? and a.roleId=?\n        `, [ ctx.instance.id, userId, roleId ]);\n      return list[0].count > 0;\n    }\n\n    async userInRoleParent({ userId, roleId }) {\n      const list = await ctx.model.query(`\n        select count(*) as count from aViewUserRoleRef a\n          where a.iid=? and a.userId=? and a.roleIdParent=?\n        `, [ ctx.instance.id, userId, roleId ]);\n      return list[0].count > 0;\n    }\n\n    async userInRoleExpand({ userId, roleId }) {\n      const list = await ctx.model.query(`\n        select count(*) as count from aViewUserRoleExpand a\n          where a.iid=? and a.userId=? and a.roleIdBase=?\n        `, [ ctx.instance.id, userId, roleId ]);\n      return list[0].count > 0;\n    }\n\n    // set dirty\n    async setDirty(dirty) {\n      await ctx.meta.status.module(moduleInfo.relativeName).set('roleDirty', dirty);\n    }\n\n    async getDirty() {\n      return await ctx.meta.status.module(moduleInfo.relativeName).get('roleDirty');\n    }\n\n    // build roles\n    async build(options) {\n      options = options || {};\n      const progressId = options.progressId;\n      // total\n      let total;\n      if (progressId) {\n        total = await this.model.count();\n      }\n      // progress\n      const progress = { progressId, total, progress: 0 };\n      try {\n        // iid\n        const iid = ctx.instance.id;\n        // remove\n        await this._buildRolesRemove({ iid });\n        // add\n        await this._buildRolesAdd({ iid, roleIdParent: 0 }, progress);\n        // setDirty\n        await this.setDirty(false);\n        // done\n        if (progressId) {\n          await ctx.meta.progress.done({ progressId });\n        }\n      } catch (err) {\n        // error\n        if (progressId) {\n          await ctx.meta.progress.error({ progressId, message: err.message });\n        }\n        throw err;\n      }\n    }\n\n    // const roleRights = [\n    //   { roleName: 'cms-writer', action: 'create' },\n    //   { roleName: 'cms-writer', action: 'write', scopeNames: 0 },\n    //   { roleName: 'cms-writer', action: 'delete', scopeNames: 0 },\n    //   { roleName: 'cms-writer', action: 'read', scopeNames: 'authenticated' },\n    //   { roleName: 'cms-publisher', action: 'read', scopeNames: 'authenticated' },\n    //   { roleName: 'cms-publisher', action: 'write', scopeNames: 'authenticated' },\n    //   { roleName: 'cms-publisher', action: 'publish', scopeNames: 'authenticated' },\n    //   { roleName: 'root', action: 'read', scopeNames: 'authenticated' },\n    // ];\n    async addRoleRightBatch({ module, atomClassName, atomClassIdParent = 0, roleRights }) {\n      if (!roleRights || !roleRights.length) return;\n      module = module || this.moduleName;\n      const _module = ctx.app.meta.modules[module];\n      const atomClass = await ctx.meta.atomClass.get({ module, atomClassName, atomClassIdParent });\n      for (const roleRight of roleRights) {\n        // role\n        const role = await this.get({ roleName: roleRight.roleName });\n        // scope\n        let scope;\n        if (!roleRight.scopeNames) {\n          scope = 0;\n        } else {\n          scope = [];\n          const scopeNames = Array.isArray(roleRight.scopeNames) ? roleRight.scopeNames : roleRight.scopeNames.split(',');\n          for (const scopeName of scopeNames) {\n            const roleScope = await this.get({ roleName: scopeName });\n            scope.push(roleScope.id);\n          }\n        }\n        // add role right\n        await this.addRoleRight({\n          roleId: role.id,\n          atomClassId: atomClass.id,\n          action: ctx.constant.module('a-base').atom.action[roleRight.action] || _module.main.meta.base.atoms[atomClassName]\n            .actions[roleRight.action].code,\n          scope,\n        });\n      }\n    }\n\n    // const roleFunctions = [\n    //   { roleName: 'root', name: 'listComment' },\n    // ];\n    async addRoleFunctionBatch({ module, roleFunctions }) {\n      if (!roleFunctions || !roleFunctions.length) return;\n      module = module || this.moduleName;\n      for (const roleFunction of roleFunctions) {\n        // role\n        const role = await this.get({ roleName: roleFunction.roleName });\n        // func\n        const func = await ctx.meta.function.get({ module, name: roleFunction.name });\n        // add role function\n        await this.addRoleFunction({\n          roleId: role.id,\n          functionId: func.id,\n        });\n      }\n    }\n\n    async _buildRolesRemove({ iid }) {\n      await ctx.model.query(`delete from aRoleRef where aRoleRef.iid=${iid}`);\n      await ctx.model.query(`delete from aRoleIncRef where aRoleIncRef.iid=${iid}`);\n      await ctx.model.query(`delete from aRoleExpand where aRoleExpand.iid=${iid}`);\n    }\n\n    async _buildRolesAdd({ iid, roleIdParent }, progress) {\n      const list = await ctx.model.query(\n        `select a.id,a.roleName,a.catalog from aRole a where a.iid=${iid} and a.roleIdParent=${roleIdParent}`\n      );\n      for (const item of list) {\n        // info\n        const roleId = item.id;\n        const catalog = item.catalog;\n        // build\n        await this._buildRoleRef({ iid, roleId });\n        await this._buildRoleIncRef({ iid, roleId });\n        await this._buildRoleExpand({ iid, roleId });\n        // catalog\n        if (catalog === 1) {\n          await this._buildRolesAdd({ iid, roleIdParent: roleId }, progress);\n        }\n        // progress\n        if (progress.progressId) {\n          await ctx.meta.progress.update({\n            progressId: progress.progressId, progressNo: 0,\n            total: progress.total, progress: progress.progress++,\n            text: item.roleName,\n          });\n        }\n      }\n    }\n\n    async _buildRoleRef({ iid, roleId }) {\n      let level = 0;\n      let roleIdParent = roleId;\n      // loop\n      while (level !== -1) {\n        await ctx.model.query(\n          `insert into aRoleRef(iid,roleId,roleIdParent,level)\n             values(${iid},${roleId},${roleIdParent},${level})\n          `\n        );\n        const item = await ctx.model.queryOne(\n          `select a.roleIdParent from aRole a where a.iid=${iid} and a.id=${roleIdParent}`\n        );\n        if (!item || !item.roleIdParent) {\n          level = -1;\n        } else {\n          roleIdParent = item.roleIdParent;\n          level++;\n        }\n      }\n    }\n\n    async _buildRoleIncRef({ iid, roleId }) {\n      await ctx.model.query(\n        `insert into aRoleIncRef(iid,roleId,roleIdInc,roleIdSrc)\n            select ${iid},${roleId},a.roleIdInc,a.roleId from aRoleInc a\n              where a.iid=${iid} and a.roleId in (select b.roleIdParent from aRoleRef b where b.iid=${iid} and b.roleId=${roleId})\n        `);\n    }\n\n    async _buildRoleExpand({ iid, roleId }) {\n      await ctx.model.query(\n        `insert into aRoleExpand(iid,roleId,roleIdBase)\n            select a.iid,a.roleId,a.roleIdParent from aRoleRef a\n              where a.iid=${iid} and a.roleId=${roleId}\n        `);\n      await ctx.model.query(\n        `insert into aRoleExpand(iid,roleId,roleIdBase)\n            select a.iid,a.roleId,a.roleIdInc from aRoleIncRef a\n              where a.iid=${iid} and a.roleId=${roleId}\n        `);\n    }\n\n  }\n\n  return Role;\n};\n","const require3 = require('require3');\nconst moment = require3('moment');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Util {\n\n    page(_page, force = true) {\n      const pageSize = ctx.config.module(moduleInfo.relativeName).pageSize;\n      if (!_page) {\n        _page = force ? { index: 0 } : { index: 0, size: 0 };\n      }\n      if (_page.size === undefined || (force && (_page.size === 0 || _page.size === -1 || _page.size > pageSize))) _page.size = pageSize;\n      return _page;\n    }\n\n    user(_user) {\n      return _user || ctx.user.op;\n    }\n\n    now() {\n      return moment().format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    today() {\n      return moment().format('YYYY-MM-DD');\n    }\n\n    formatDateTime(date, fmt) {\n      date = date || new Date();\n      fmt = fmt || 'YYYY-MM-DD HH:mm:ss';\n      if (typeof (date) !== 'object') date = new Date(date);\n      return moment(date).format(fmt);\n    }\n\n    formatDate(date, sep) {\n      if (this.isUndefined(sep)) sep = '-';\n      const fmt = `YYYY${sep}MM${sep}DD`;\n      return this.formatDateTime(date, fmt);\n    }\n\n    formatTime(date, sep) {\n      if (this.isUndefined(sep)) sep = ':';\n      const fmt = `HH${sep}mm${sep}ss`;\n      return this.formatDateTime(date, fmt);\n    }\n\n    fromNow(date) {\n      if (typeof (date) !== 'object') date = new Date(date);\n      return moment(date).fromNow();\n    }\n\n    replaceTemplate(content, scope) {\n      if (!content) return null;\n      return content.toString().replace(/(\\\\)?{{ *(\\w+) *}}/g, (block, skip, key) => {\n        if (skip) {\n          return block.substring(skip.length);\n        }\n        return scope[key] !== undefined ? scope[key] : '';\n      });\n    }\n\n    sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n  }\n\n  return Util;\n};\n","module.exports = (options, app) => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function auth(ctx, next) {\n    // always has anonymous id\n    ctx.meta.user.anonymousId();\n    // check\n    if (!ctx.isAuthenticated() || !ctx.user.op || !ctx.user.agent || ctx.user.op.iid !== ctx.instance.id) {\n      // anonymous\n      await ctx.meta.user.loginAsAnonymous();\n    } else {\n      // check if deleted,disabled,agent\n      await ctx.meta.user.check();\n    }\n\n    // if user\n    if (options.user && ctx.user.op.anonymous) ctx.throw(401);\n\n    // next\n    await next();\n  };\n};\n","// request.body\n//   key: atomId itemId\n//   atomClass: id,module,atomClassName,atomClassIdParent\n//   item:\n// options\n//   type: atom/function\n//   action(atom):\n//   name(function):\n//   module:\nmodule.exports = (options, app) => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function right(ctx, next) {\n    // ignore\n    if (!options.type) return await next();\n\n    // atom\n    if (options.type === 'atom') await checkAtom(moduleInfo, options, ctx);\n\n    // function\n    if (options.type === 'function') await checkFunction(moduleInfo, options, ctx);\n\n    // next\n    await next();\n  };\n};\n\nasync function checkAtom(moduleInfo, options, ctx) {\n  // constant\n  const constant = ctx.constant.module(moduleInfo.relativeName);\n\n  // create\n  if (options.action === constant.atom.action.create) {\n    // atomClassId\n    let atomClassId = ctx.request.body.atomClass.id;\n    if (!atomClassId) {\n      const res = await ctx.meta.atomClass.get({\n        module: ctx.request.body.atomClass.module,\n        atomClassName: ctx.request.body.atomClass.atomClassName,\n        atomClassIdParent: ctx.request.body.atomClass.atomClassIdParent || 0,\n      });\n      atomClassId = res.id;\n    }\n    const res = await ctx.meta.atom.checkRightCreate({\n      atomClass: {\n        id: atomClassId,\n      },\n      user: ctx.user.op,\n    });\n    if (!res) ctx.throw(403);\n    ctx.meta._atomClass = res;\n  }\n\n  // read\n  if (options.action === constant.atom.action.read) {\n    const res = await ctx.meta.atom.checkRightRead({\n      atom: { id: ctx.request.body.key.atomId },\n      user: ctx.user.op,\n    });\n    if (!res) ctx.throw(403);\n    ctx.request.body.key.itemId = res.itemId;\n    ctx.meta._atom = res;\n  }\n\n  // write/delete\n  if (options.action === constant.atom.action.write || options.action === constant.atom.action.delete) {\n    const res = await ctx.meta.atom.checkRightUpdate({\n      atom: { id: ctx.request.body.key.atomId, action: options.action },\n      user: ctx.user.op,\n    });\n    if (!res) ctx.throw(403);\n    ctx.request.body.key.itemId = res.itemId;\n    ctx.meta._atom = res;\n  }\n\n  // other action\n  const actionCustom = options.action || ctx.request.body.action;\n  if (actionCustom > constant.atom.action.custom) {\n    const res = await ctx.meta.atom.checkRightAction({\n      atom: { id: ctx.request.body.key.atomId, action: actionCustom },\n      user: ctx.user.op,\n    });\n    if (!res) ctx.throw(403);\n    ctx.request.body.key.itemId = res.itemId;\n    ctx.meta._atom = res;\n  }\n\n}\n\nasync function checkFunction(moduleInfo, options, ctx) {\n  const res = await ctx.meta.function.checkRightFunction({\n    function: {\n      module: options.module || ctx.module.info.relativeName,\n      name: options.name || ctx.request.body.name },\n    user: ctx.user.op,\n  });\n  if (!res) ctx.throw(403);\n  ctx.meta._function = res;\n}\n","module.exports = (options, app) => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function jsonp(ctx, next) {\n    // options\n    options = options || {};\n    // whiteList\n    if (ctx.app.meta.isTest) {\n      options.whiteList = false;\n    } else {\n      const _config = ctx.config.module(moduleInfo.relativeName);\n      const _whiteList = _config && _config.jsonp && _config.jsonp.whiteList;\n      const hostSelf = ctx.host.split(':')[0];\n      if (_whiteList) {\n        if (!Array.isArray(_whiteList)) {\n          options.whiteList = _whiteList.split(',');\n        } else {\n          options.whiteList = _whiteList.concat();\n        }\n        options.whiteList.push(hostSelf);\n      } else {\n        options.whiteList = [ hostSelf ];\n      }\n    }\n    // jsonp\n    const fn = ctx.app.jsonp(options);\n    await fn(ctx, next);\n  };\n};\n","module.exports = (options, app) => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function httpLog(ctx, next) {\n    await next();\n\n    // check if log\n    const _config = ctx.config.module(moduleInfo.relativeName);\n    if (!_config.httpLog) return;\n\n    //\n    const req = ctx.request;\n    const res = ctx.response;\n\n    // check if json\n    if (res.type.indexOf('application/json') === -1) return;\n\n    // log\n    let log = '\\n';\n    // query\n    if (req.query && Object.keys(req.query).length > 0) {\n      log = `${log}query:\n  ${JSON.stringify(req.query)}\n`;\n    }\n    // params\n    if (req.params && Object.keys(req.params).length > 0) {\n      log = `${log}params:\n  ${JSON.stringify(req.params)}\n`;\n    }\n    // body\n    if (req.body && Object.keys(req.body).length > 0) {\n      log = `${log}body:\n  ${JSON.stringify(req.body)}\n`;\n    }\n    // res\n    log = `${log}response:\n  ${JSON.stringify(res.body)}\n`;\n    // log\n    ctx.logger.info(log);\n  };\n};\n","const version = require('./controller/version.js');\nconst base = require('./controller/base.js');\nconst user = require('./controller/user.js');\nconst atom = require('./controller/atom.js');\nconst atomClass = require('./controller/atomClass.js');\nconst atomAction = require('./controller/atomAction.js');\nconst func = require('./controller/function.js');\nconst auth = require('./controller/auth.js');\nconst comment = require('./controller/comment.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    // base\n    { method: 'post', path: 'base/modules', controller: base },\n    { method: 'post', path: 'base/locales', controller: base },\n    { method: 'post', path: 'base/atomClasses', controller: base },\n    { method: 'post', path: 'base/actions', controller: base },\n    { method: 'post', path: 'base/flags', controller: base },\n    { method: 'post', path: 'base/orders', controller: base },\n    { method: 'post', path: 'base/menus', controller: base },\n    { method: 'post', path: 'base/functions', controller: base },\n    { method: 'get', path: 'base/performAction', controller: base, middlewares: 'jsonp', meta: { auth: { enable: false } } },\n    // atom\n    { method: 'post', path: 'atom/create', controller: atom, middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 1 } },\n    },\n    { method: 'post', path: 'atom/read', controller: atom,\n      meta: { right: { type: 'atom', action: 2 } },\n    },\n    { method: 'post', path: 'atom/select', controller: atom },\n    { method: 'post', path: 'atom/write', controller: atom, middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 3 } },\n    },\n    { method: 'post', path: 'atom/submit', controller: atom, middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 3 } },\n    },\n    { method: 'post', path: 'atom/delete', controller: atom, middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 4 } },\n    },\n    { method: 'post', path: 'atom/action', controller: atom, middlewares: 'transaction',\n      meta: { right: { type: 'atom' } },\n    },\n    { method: 'post', path: 'atom/enable', controller: atom, middlewares: 'transaction' },\n    { method: 'post', path: 'atom/star', controller: atom,\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 2 },\n      },\n    },\n    { method: 'post', path: 'atom/readCount', controller: atom,\n      meta: { right: { type: 'atom', action: 2 } },\n    },\n    { method: 'post', path: 'atom/stats', controller: atom },\n    { method: 'post', path: 'atom/labels', controller: atom,\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 2 },\n      },\n    },\n    { method: 'post', path: 'atom/actions', controller: atom },\n    { method: 'post', path: 'atom/schema', controller: atom },\n    { method: 'post', path: 'atom/validator', controller: atom },\n    // comment\n    { method: 'post', path: 'comment/all', controller: comment },\n    { method: 'post', path: 'comment/list', controller: comment,\n      meta: { right: { type: 'atom', action: 2 } },\n    },\n    { method: 'post', path: 'comment/item', controller: comment,\n      meta: { right: { type: 'atom', action: 2 } },\n    },\n    { method: 'post', path: 'comment/save', controller: comment, middlewares: 'transaction',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 2 },\n      },\n    },\n    { method: 'post', path: 'comment/delete', controller: comment, middlewares: 'transaction',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 2 },\n      },\n    },\n    { method: 'post', path: 'comment/heart', controller: comment, middlewares: 'transaction',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 2 },\n      },\n    },\n    // user\n    { method: 'post', path: 'user/getLabels', controller: user },\n    { method: 'post', path: 'user/setLabels', controller: user },\n    // function\n    { method: 'post', path: 'function/list', controller: func },\n    { method: 'post', path: 'function/star', controller: func },\n    { method: 'post', path: 'function/check', controller: func },\n    { method: 'post', path: 'function/checkLocale', controller: func, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'function/register', controller: func, middlewares: 'inner',\n      meta: { auth: { enable: false } },\n    },\n    { method: 'post', path: 'function/clearLocales', controller: func, middlewares: 'inner',\n      meta: { instance: { enable: false } },\n    },\n    // atomAction\n    { method: 'post', path: 'atomAction/register', controller: atomAction, middlewares: 'inner',\n      meta: { auth: { enable: false } },\n    },\n    // atomClass\n    { method: 'post', path: 'atomClass/register', controller: atomClass, middlewares: 'inner',\n      meta: { auth: { enable: false } },\n    },\n    { method: 'post', path: 'atomClass/validatorSearch', controller: atomClass },\n    { method: 'post', path: 'atomClass/checkRightCreate', controller: atomClass },\n    // auth\n    { method: 'post', path: 'auth/echo', controller: auth, meta: { auth: { enable: false } } },\n    { method: 'post', path: 'auth/check', controller: auth, meta: { auth: { user: true } } },\n    { method: 'post', path: 'auth/logout', controller: auth, meta: { auth: { enable: false } } },\n    { method: 'post', path: 'auth/installAuthProviders', controller: auth, middlewares: 'inner',\n      meta: { instance: { enable: false } },\n    },\n    { method: 'post', path: 'auth/register', controller: auth, middlewares: 'inner',\n      meta: { auth: { enable: false } },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n\n  class BaseController extends app.Controller {\n\n    modules() {\n      const res = this.ctx.service.base.modules();\n      this.ctx.success(res);\n    }\n\n    locales() {\n      const res = this.ctx.service.base.locales();\n      this.ctx.success(res);\n    }\n\n    atomClasses() {\n      const res = this.ctx.service.base.atomClasses();\n      this.ctx.success(res);\n    }\n\n    actions() {\n      const res = this.ctx.service.base.actions();\n      this.ctx.success(res);\n    }\n\n    flags() {\n      const res = this.ctx.service.base.flags();\n      this.ctx.success(res);\n    }\n\n    orders() {\n      const res = this.ctx.service.base.orders();\n      this.ctx.success(res);\n    }\n\n    menus() {\n      const res = this.ctx.service.base.menus();\n      this.ctx.success(res);\n    }\n\n    functions() {\n      const res = this.ctx.service.base.functions();\n      this.ctx.success(res);\n    }\n\n    async performAction() {\n      // params\n      const params = JSON.parse(this.ctx.request.query.params);\n      // performAction\n      const res = await this.ctx.performAction(params);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return BaseController;\n};\n","module.exports = app => {\n\n  class UserController extends app.Controller {\n\n    async getLabels() {\n      const res = await this.ctx.service.user.getLabels({\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async setLabels() {\n      await this.ctx.service.user.setLabels({\n        labels: this.ctx.request.body.labels,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success();\n    }\n\n  }\n  return UserController;\n};\n\n","module.exports = app => {\n\n  class AtomController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.atom.create({\n        atomClass: this.ctx.request.body.atomClass,\n        item: this.ctx.request.body.item,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.atom.read({\n        key: this.ctx.request.body.key,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    // options\n    //   where, orders, page, star, label\n    async select() {\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.meta.util.page(options.page);\n      const items = await this.ctx.service.atom.select({\n        atomClass: this.ctx.request.body.atomClass,\n        options,\n        user: this.ctx.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async write() {\n      await this.ctx.service.atom.write({\n        key: this.ctx.request.body.key,\n        item: this.ctx.request.body.item,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success();\n    }\n\n    async submit() {\n      await this.write();\n      await this.enable();\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.atom.delete({\n        key: this.ctx.request.body.key,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.atom.action({\n        action: this.ctx.request.body.action,\n        key: this.ctx.request.body.key,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      // only allowed: draft\n      const key = this.ctx.request.body.key;\n      const user = this.ctx.user.op;\n      const atom = await this.ctx.meta.atom._get({ atom: { id: key.atomId }, user });\n      if (atom.atomEnabled || user.id !== atom.userIdCreated) this.ctx.throw(403);\n      // enable\n      const res = await this.ctx.service.atom.enable({\n        key,\n        atom: { atomEnabled: 1 },\n        user,\n      });\n      this.ctx.success(res);\n    }\n\n    async star() {\n      const res = await this.ctx.service.atom.star({\n        key: this.ctx.request.body.key,\n        atom: this.ctx.request.body.atom,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async readCount() {\n      const res = await this.ctx.service.atom.readCount({\n        key: this.ctx.request.body.key,\n        atom: this.ctx.request.body.atom,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async stats() {\n      // atomIds\n      const atomIds = this.ctx.request.body.atomIds;\n      const options = {\n        where: {\n          'a.id': { op: 'in', val: atomIds },\n        },\n      };\n      // select\n      const res = await this.ctx.meta.atom.select({\n        options, user: this.ctx.user.op, pageForce: false,\n      });\n      this.ctx.success(res);\n    }\n\n    async labels() {\n      const res = await this.ctx.service.atom.labels({\n        key: this.ctx.request.body.key,\n        atom: this.ctx.request.body.atom,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async actions() {\n      const res = await this.ctx.service.atom.actions({\n        key: this.ctx.request.body.key,\n        basic: this.ctx.request.body.basic,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async schema() {\n      const res = await this.ctx.service.atom.schema({\n        atomClass: this.ctx.request.body.atomClass,\n        schema: this.ctx.request.body.schema,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async validator() {\n      const res = await this.ctx.service.atom.validator({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return AtomController;\n};\n\n","module.exports = app => {\n\n  class AtomClassController extends app.Controller {\n\n    async register() {\n      const res = await this.ctx.service.atomClass.register({\n        module: this.ctx.request.body.module,\n        atomClassName: this.ctx.request.body.atomClassName,\n        atomClassIdParent: this.ctx.request.body.atomClassIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async validatorSearch() {\n      const res = await this.ctx.service.atomClass.validatorSearch({\n        atomClass: this.ctx.request.body.atomClass,\n      });\n      this.ctx.success(res);\n    }\n\n    async checkRightCreate() {\n      const res = await this.ctx.service.atomClass.checkRightCreate({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n\n  return AtomClassController;\n};\n","module.exports = app => {\n\n  class AtomActionController extends app.Controller {\n\n    async register() {\n      const res = await this.ctx.service.atomAction.register({\n        atomClassId: this.ctx.request.body.atomClassId,\n        code: this.ctx.request.body.code,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n\n  return AtomActionController;\n};\n","module.exports = app => {\n\n  class FunctionController extends app.Controller {\n\n    // options\n    //   where, orders, page, star,language\n    async list() {\n      const options = this.ctx.request.body.options || {};\n      options.page = this.ctx.meta.util.page(options.page, false); // false\n      // locale maybe '' for selectAllFunctions\n      if (options.locale === undefined) options.locale = this.ctx.locale;\n      const items = await this.ctx.service.function.list({\n        options,\n        user: this.ctx.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async star() {\n      const res = await this.ctx.service.function.star({\n        id: this.ctx.request.body.id,\n        star: this.ctx.request.body.star,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async check() {\n      const res = await this.ctx.service.function.check({\n        functions: this.ctx.request.body.functions,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async checkLocale() {\n      const res = await this.ctx.service.function.checkLocale({\n        locale: this.ctx.request.body.locale,\n      });\n      this.ctx.success(res);\n    }\n\n    async register() {\n      const res = await this.ctx.service.function.register({\n        module: this.ctx.request.body.module,\n        name: this.ctx.request.body.name,\n      });\n      this.ctx.success(res);\n    }\n\n    async clearLocales() {\n      const res = await this.ctx.service.function.clearLocales();\n      this.ctx.success(res);\n    }\n\n  }\n\n  return FunctionController;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n\n  class AuthController extends app.Controller {\n\n    // return current user auth info\n    //   { op:{id},agent:{id},provider}\n    async echo() {\n      try {\n        if (!this.ctx.isAuthenticated() || !this.ctx.user.op || !this.ctx.user.agent) {\n          // anonymous\n          await this.ctx.meta.user.loginAsAnonymous();\n        } else {\n          // check if deleted,disabled,agent\n          await this.ctx.meta.user.check();\n        }\n        // logined\n        const info = await this.getLoginInfo();\n        this.ctx.success(info);\n      } catch (e) {\n        // deleted,disabled\n        await this.logout();\n      }\n    }\n\n    async check() {\n      const info = await this.getLoginInfo();\n      this.ctx.success(info);\n    }\n\n    async logout() {\n      await this.ctx.logout();\n      await this.ctx.meta.user.loginAsAnonymous();\n      const info = await this.getLoginInfo();\n      this.ctx.success(info);\n    }\n\n    async installAuthProviders() {\n      // register all authProviders\n      await this.ctx.service.auth.registerAllProviders();\n      // verify\n      this.app.passport.verify(async function(ctx, profileUser) {\n        // state: login/associate\n        const state = ctx.request.query.state || 'login';\n        // user verify\n        const verifyUser = await ctx.meta.user.verify({ state, profileUser });\n        // user verify event\n        await ctx.meta.event.invoke({\n          module: 'a-base', name: 'userVerify', data: { verifyUser, profileUser },\n        });\n        // ready\n        return verifyUser;\n      });\n      this.ctx.success();\n    }\n\n    async register() {\n      const res = await this.ctx.service.auth.register({\n        module: this.ctx.request.body.module,\n        providerName: this.ctx.request.body.providerName,\n      });\n      this.ctx.success(res);\n    }\n\n    async getLoginInfo() {\n      const info = {\n        user: this.ctx.user,\n        instance: this.getInstance(),\n        config: this.getConfig(),\n      };\n      // login info event\n      await this.ctx.meta.event.invoke({\n        name: 'loginInfo', data: { info },\n      });\n      return info;\n    }\n\n    getInstance() {\n      return {\n        name: this.ctx.instance.name,\n        title: this.ctx.instance.title,\n      };\n    }\n\n    getConfig() {\n      // account\n      const account = extend(true, {}, this.ctx.config.account);\n      account.activatedRoles = undefined;\n      // config\n      const config = {\n        modules: {\n          'a-base': {\n            account,\n          },\n        },\n      };\n      return config;\n    }\n\n  }\n\n  return AuthController;\n};\n","module.exports = app => {\n\n  class CommentController extends app.Controller {\n\n    async all() {\n      const options = this.ctx.request.body.options;\n      options.comment = 1;\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'atom/select',\n        body: {\n          atomClass: this.ctx.request.body.atomClass,\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    async list() {\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.meta.util.page(options.page);\n      const items = await this.ctx.service.comment.list({\n        key: this.ctx.request.body.key,\n        options,\n        user: this.ctx.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async item() {\n      const res = await this.ctx.service.comment.item({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      const res = await this.ctx.service.comment.save({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      const res = await this.ctx.service.comment.delete({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async heart() {\n      const res = await this.ctx.service.comment.heart({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return CommentController;\n};\n","const version = require('./service/version.js');\nconst base = require('./service/base.js');\nconst user = require('./service/user.js');\nconst atom = require('./service/atom.js');\nconst atomClass = require('./service/atomClass.js');\nconst atomAction = require('./service/atomAction.js');\nconst auth = require('./service/auth.js');\nconst func = require('./service/function.js');\nconst comment = require('./service/comment.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    base,\n    user,\n    atom,\n    atomClass,\n    atomAction,\n    auth,\n    function: func,\n    comment,\n  };\n  return services;\n};\n","const VersionUpdate1Fn = require('./version/update1.js');\nconst VersionUpdate2Fn = require('./version/update2.js');\nconst VersionUpdate3Fn = require('./version/update3.js');\nconst VersionUpdate4Fn = require('./version/update4.js');\nconst VersionUpdate6Fn = require('./version/update6.js');\nconst VersionInit2Fn = require('./version/init2.js');\nconst VersionInit4Fn = require('./version/init4.js');\nconst VersionInit5Fn = require('./version/init5.js');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n\n      if (options.version === 6) {\n        const versionUpdate6 = new (VersionUpdate6Fn(this.ctx))();\n        await versionUpdate6.run();\n      }\n\n      if (options.version === 4) {\n        const versionUpdate4 = new (VersionUpdate4Fn(this.ctx))();\n        await versionUpdate4.run();\n      }\n\n      if (options.version === 3) {\n        const versionUpdate3 = new (VersionUpdate3Fn(this.ctx))();\n        await versionUpdate3.run();\n      }\n\n      if (options.version === 2) {\n        const versionUpdate2 = new (VersionUpdate2Fn(this.ctx))();\n        await versionUpdate2.run();\n      }\n\n      if (options.version === 1) {\n        const versionUpdate1 = new (VersionUpdate1Fn(this.ctx))();\n        await versionUpdate1.run();\n      }\n    }\n\n    async init(options) {\n      if (options.version === 2) {\n        const versionInit2 = new (VersionInit2Fn(this.ctx))();\n        await versionInit2.run(options);\n      }\n      if (options.version === 4) {\n        const versionInit4 = new (VersionInit4Fn(this.ctx))();\n        await versionInit4.run(options);\n      }\n      if (options.version === 5) {\n        const versionInit5 = new (VersionInit5Fn(this.ctx))();\n        await versionInit5.run(options);\n      }\n    }\n\n  }\n\n  return Version;\n};\n","const update1Data = require('./update1Data.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionUpdate1 {\n\n    async run() {\n      // tables\n      const tableNames = [\n        'aUser', 'aUserAgent', 'aAuthProvider', 'aAuth', 'aRole', 'aRoleInc', 'aUserRole', 'aRoleRight',\n        'aAtomClass', 'aAtom', 'aAtomAction',\n        'aLabel', 'aAtomLabel', 'aAtomLabelRef', 'aAtomStar',\n        'aRoleRef', 'aRoleIncRef', 'aRoleExpand', 'aRoleRightRef',\n        'aFunction', 'aFunctionStar', 'aFunctionLocale', 'aRoleFunction',\n      ];\n\n      for (const tableName of tableNames) {\n        await ctx.model.query(update1Data.tables[tableName]);\n      }\n\n      // views\n      const viewNames = [\n        'aViewUserRoleRef',\n        'aViewUserRoleExpand',\n        'aViewUserRightAtomClass',\n        'aViewUserRightAtomClassUser',\n        'aViewUserRightAtom',\n        'aViewUserRightFunction',\n      ];\n      for (const viewName of viewNames) {\n        await ctx.model.query(update1Data.views[viewName]);\n      }\n\n      // functions\n      const functionNames = [\n      ];\n      for (const functionName of functionNames) {\n        await ctx.model.query(update1Data.functions[functionName]);\n      }\n\n    }\n\n  }\n\n  return VersionUpdate1;\n};\n","const tables = {\n  aUser: `\n          CREATE TABLE aUser (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            disabled int(11) DEFAULT '0',\n            userName varchar(50) DEFAULT NULL,\n            realName varchar(50) DEFAULT NULL,\n            email varchar(50) DEFAULT NULL,\n            mobile varchar(50) DEFAULT NULL,\n            avatar varchar(255) DEFAULT NULL,\n            motto varchar(255) DEFAULT NULL,\n            locale varchar(255) DEFAULT NULL,\n            anonymous int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aUserAgent: `\n          CREATE TABLE aUserAgent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            userIdAgent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAuthProvider: `\n          CREATE TABLE aAuthProvider (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            disabled int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            providerName varchar(50) DEFAULT NULL,\n            config json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aAuth: `\n          CREATE TABLE aAuth (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            providerId int(11) DEFAULT '0',\n            profileId varchar(255) DEFAULT NULL,\n            profile json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aRole: `\n          CREATE TABLE aRole (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleName varchar(50) DEFAULT NULL,\n            leader int(11) DEFAULT '0',\n            catalog int(11) DEFAULT '0',\n            \\`system\\` int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            roleIdParent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleRef: `\n          CREATE TABLE aRoleRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdParent int(11) DEFAULT '0',\n            level int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleInc: `\n          CREATE TABLE aRoleInc (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdInc int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleIncRef: `\n          CREATE TABLE aRoleIncRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdInc int(11) DEFAULT '0',\n            roleIdSrc int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleExpand: `\n          CREATE TABLE aRoleExpand (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdBase int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aUserRole: `\n          CREATE TABLE aUserRole (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomClass: `\n          CREATE TABLE aAtomClass (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            atomClassName varchar(255) DEFAULT NULL,\n            atomClassIdParent int(11) DEFAULT '0',\n            public int(11) DEFAULT '0',\n            flow int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtom: `\n          CREATE TABLE aAtom (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            atomEnabled int(11) DEFAULT '0',\n            atomFlow int(11) DEFAULT '0',\n            atomFlag int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            atomName varchar(255) DEFAULT NULL,\n            userIdCreated int(11) DEFAULT '0',\n            userIdUpdated int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomAction: `\n          CREATE TABLE aAtomAction (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            code int(11) DEFAULT '0',\n            name varchar(50) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aLabel: `\n          CREATE TABLE aLabel (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            labels JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomLabel: `\n          CREATE TABLE aAtomLabel (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            labels JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomLabelRef: `\n          CREATE TABLE aAtomLabelRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            labelId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomStar: `\n          CREATE TABLE aAtomStar (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            star int(11) DEFAULT '1',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleRight: `\n          CREATE TABLE aRoleRight (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            action int(11) DEFAULT '0',\n            scope JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleRightRef: `\n          CREATE TABLE aRoleRightRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleRightId int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            action int(11) DEFAULT '0',\n            roleIdScope int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aFunction: `\n          CREATE TABLE aFunction (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            title varchar(255) DEFAULT NULL,\n            scene int(11) DEFAULT '0',\n            autoRight int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            action int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            menu int(11) DEFAULT '0',\n            public int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aFunctionStar: `\n          CREATE TABLE aFunctionStar (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            functionId int(11) DEFAULT '0',\n            star int(11) DEFAULT '1',\n            PRIMARY KEY (id)\n          )\n        `,\n  aFunctionLocale: `\n          CREATE TABLE aFunctionLocale (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            functionId int(11) DEFAULT '0',\n            locale varchar(50) DEFAULT NULL,\n            titleLocale varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleFunction: `\n          CREATE TABLE aRoleFunction (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            functionId int(11) DEFAULT '0',\n            roleRightId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n};\n\nconst views = {\n  aViewUserRoleRef: `\ncreate view aViewUserRoleRef as\n  select a.iid,a.userId,a.roleId,b.roleIdParent,b.level from aUserRole a\n    inner join aRoleRef b on a.roleId=b.roleId\n  `,\n  aViewUserRoleExpand: `\ncreate view aViewUserRoleExpand as\n  select a.iid,a.userId,a.roleId,b.roleIdBase,b.id as roleExpandId from aUserRole a\n    left join aRoleExpand b on a.roleId=b.roleId\n  `,\n  aViewUserRightAtomClass: `\ncreate view aViewUserRightAtomClass as\n  select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,b.id as roleRightId,b.atomClassId,b.action,b.scope from aViewUserRoleExpand a\n    inner join aRoleRight b on a.roleIdBase=b.roleId\n  `,\n  aViewUserRightAtomClassUser: `\ncreate view aViewUserRightAtomClassUser as\n  select a.iid,a.userId as userIdWho,b.atomClassId,b.action,c.userId as userIdWhom from aViewUserRoleExpand a\n    inner join aRoleRightRef b on a.roleIdBase=b.roleId\n    inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n  `,\n  aViewUserRightAtom: `\ncreate view aViewUserRightAtom as\n  select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,b.userIdWho,b.action from aAtom a,aViewUserRightAtomClassUser b\n    where a.deleted=0 and a.atomEnabled=1\n      and a.atomClassId=b.atomClassId\n      and a.userIdCreated=b.userIdWhom\n  `,\n  aViewUserRightFunction: `\ncreate view aViewUserRightFunction as\n  select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,b.id as roleFunctionId,b.functionId from aViewUserRoleExpand a\n    inner join aRoleFunction b on a.roleIdBase=b.roleId\n  `,\n};\n\nconst functions = {\n};\n\nmodule.exports = {\n  tables,\n  views,\n  functions,\n};\n","module.exports = function(ctx) {\n\n  class VersionUpdate2 {\n\n    async run() {\n      // enable 0\n      await ctx.model.query('SET SESSION sql_mode=\\'NO_AUTO_VALUE_ON_ZERO\\'');\n      // add userId 0\n      await ctx.db.insert('aUser', {\n        id: 0,\n        iid: 0,\n        userName: 'system',\n        realName: 'system',\n      });\n      // add roleId 0\n      await ctx.db.insert('aRole', {\n        id: 0,\n        iid: 0,\n        roleName: 'system',\n        catalog: 1,\n        system: 1,\n        roleIdParent: -1,\n      });\n      // disable 0\n      await ctx.model.query('SET SESSION sql_mode=\\'\\'');\n    }\n\n  }\n\n  return VersionUpdate2;\n};\n","module.exports = function(ctx) {\n\n  class VersionUpdate3 {\n\n    async run() {\n      // aViewRoleRightAtomClassUser\n      let sql = `\n        create view aViewRoleRightAtomClassUser as\n          select a.iid,a.roleId as roleIdWho,b.atomClassId,b.action,c.userId as userIdWhom from aRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n          `;\n      await ctx.model.query(sql);\n\n      // aViewRoleRightAtom\n      sql = `\n        create view aViewRoleRightAtom as\n          select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,b.roleIdWho,b.action from aAtom a,aViewRoleRightAtomClassUser b\n            where a.deleted=0 and a.atomEnabled=1\n              and a.atomClassId=b.atomClassId\n              and a.userIdCreated=b.userIdWhom\n          `;\n      await ctx.model.query(sql);\n\n      // aCheckRoleRightRead\n      sql = `\n        create procedure aCheckRoleRightRead (in _iid int,in _roleIdWho int,in _atomId int)\n        begin\n\n          select a.* from aAtom a\n           left join aAtomClass b on a.atomClassId=b.id\n            where (\n             a.deleted=0 and a.iid=_iid and a.id=_atomId\n             and (\n                    (a.atomEnabled=1 and (\n                      (\n                        a.atomFlow=1 and (\n                          (exists(select c.atomId from aViewRoleRightAtom c where c.iid=_iid and a.id=c.atomId and c.action>2 and c.roleIdWho=_roleIdWho))\n                        )\n                      ) or (\n                        a.atomFlow=0 and (\n                          b.public=1 or exists(select c.atomId from aViewRoleRightAtom c where c.iid=_iid and a.id=c.atomId and c.action=2 and c.roleIdWho=_roleIdWho)\n                        )\n                      )\n                    ))\n                  )\n            );\n\n        end\n        `;\n      await ctx.model.query(sql);\n\n    }\n\n  }\n\n  return VersionUpdate3;\n};\n","module.exports = function(ctx) {\n\n  class VersionUpdate4 {\n\n    async run() {\n\n      // aComment\n      let sql = `\n          CREATE TABLE aComment (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            heartCount int(11) DEFAULT '0',\n            replyId int(11) DEFAULT '0',\n            replyUserId int(11) DEFAULT '0',\n            replyContent text DEFAULT NULL,\n            content text DEFAULT NULL,\n            summary text DEFAULT NULL,\n            html text DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // aViewComment\n      sql = `\n          create view aViewComment as\n            select a.*,b.userName,b.avatar,c.userName as replyUserName from aComment a\n              left join aUser b on a.userId=b.id\n              left join aUser c on a.replyUserId=c.id\n        `;\n      await ctx.model.query(sql);\n\n      // aCommentHeart\n      sql = `\n          CREATE TABLE aCommentHeart (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            commentId int(11) DEFAULT '0',\n            heart int(11) DEFAULT '1',\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // aAtom\n      sql = `\n        ALTER TABLE aAtom\n          MODIFY COLUMN updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          ADD COLUMN allowComment int(11) DEFAULT '1',\n          ADD COLUMN starCount int(11) DEFAULT '0',\n          ADD COLUMN commentCount int(11) DEFAULT '0',\n          ADD COLUMN attachmentCount int(11) DEFAULT '0',\n          ADD COLUMN readCount int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n\n    }\n\n  }\n\n  return VersionUpdate4;\n};\n","module.exports = function(ctx) {\n\n  class VersionUpdate6 {\n\n    async run() {\n\n      // aUser\n      const sql = `\n        ALTER TABLE aUser\n          ADD COLUMN activated int(11) DEFAULT '0',\n          ADD COLUMN emailConfirmed int(11) DEFAULT '0',\n          ADD COLUMN mobileVerified int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n\n    }\n\n  }\n\n  return VersionUpdate6;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\nconst initData = require('./initData2.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionInit {\n\n    async run(options) {\n      // roles\n      const roleIds = await this._initRoles();\n      // role includes\n      await this._roleIncludes(roleIds);\n      // build\n      await ctx.meta.role.setDirty(true);\n      // users\n      await this._initUsers(roleIds, options);\n    }\n\n    // roles\n    async _initRoles() {\n      const roleIds = {};\n      roleIds.system = 0;\n      // system roles\n      for (const roleName of ctx.constant.systemRoles) {\n        const role = extend(true, {}, initData.roles[roleName]);\n        role.roleIdParent = roleIds[role.roleIdParent];\n        roleIds[roleName] = await ctx.meta.role.add(role);\n      }\n      return roleIds;\n    }\n\n    // role includes\n    async _roleIncludes(roleIds) {\n      for (const item of initData.includes) {\n        await ctx.meta.role.addRoleInc({ roleId: roleIds[item.from], roleIdInc: roleIds[item.to] });\n      }\n    }\n\n    // users\n    async _initUsers(roleIds, options) {\n      // root user\n      const userRoot = extend(true, {}, initData.users.root);\n      userRoot.item.email = options.email;\n      userRoot.item.mobile = options.mobile;\n      const userId = await ctx.meta.user.add(userRoot.item);\n      // activated\n      await ctx.meta.user.save({\n        user: { id: userId, activated: 1 },\n      });\n      // user->role\n      await ctx.meta.role.addUserRole({\n        userId,\n        roleId: roleIds[userRoot.roleId],\n      });\n    }\n\n  }\n\n  return VersionInit;\n};\n","// roles\nconst roles = {\n  root: {\n    roleName: 'root', leader: 0, catalog: 1, system: 1, sorting: 0, roleIdParent: 'system',\n  },\n  anonymous: {\n    roleName: 'anonymous', leader: 0, catalog: 0, system: 1, sorting: 1, roleIdParent: 'root',\n  },\n  authenticated: {\n    roleName: 'authenticated', leader: 0, catalog: 1, system: 1, sorting: 2, roleIdParent: 'root',\n  },\n  template: {\n    roleName: 'template', leader: 0, catalog: 1, system: 1, sorting: 1, roleIdParent: 'authenticated',\n  },\n  system: {\n    roleName: 'system', leader: 0, catalog: 0, system: 1, sorting: 1, roleIdParent: 'template',\n  },\n  registered: {\n    roleName: 'registered', leader: 0, catalog: 0, system: 1, sorting: 2, roleIdParent: 'authenticated',\n  },\n  activated: {\n    roleName: 'activated', leader: 0, catalog: 0, system: 1, sorting: 3, roleIdParent: 'authenticated',\n  },\n  superuser: {\n    roleName: 'superuser', leader: 0, catalog: 0, system: 1, sorting: 4, roleIdParent: 'authenticated',\n  },\n  organization: {\n    roleName: 'organization', leader: 0, catalog: 1, system: 1, sorting: 5, roleIdParent: 'authenticated',\n  },\n  internal: {\n    roleName: 'internal', leader: 0, catalog: 1, system: 1, sorting: 1, roleIdParent: 'organization',\n  },\n  external: {\n    roleName: 'external', leader: 0, catalog: 1, system: 1, sorting: 2, roleIdParent: 'organization',\n  },\n};\n\nconst includes = [\n  { from: 'superuser', to: 'system' },\n];\n\nconst users = {\n  root: {\n    item: {\n      userName: 'root',\n      realName: 'root',\n      email: null,\n      mobile: null,\n      avatar: null,\n      motto: null,\n      locale: null,\n    },\n    roleId: 'superuser',\n  },\n};\n\nmodule.exports = {\n  roles,\n  includes,\n  users,\n};\n","module.exports = function(ctx) {\n\n  class VersionInit {\n\n    async run(options) {\n      // roleFunctions\n      const roleFunctions = [\n        { roleName: 'root', name: 'listComment' },\n      ];\n      await ctx.meta.role.addRoleFunctionBatch({ roleFunctions });\n    }\n\n  }\n\n  return VersionInit;\n};\n","module.exports = function(ctx) {\n\n  class VersionInit {\n\n    async run(options) {\n      // add role:template to authenticated\n      // add role:system to template\n      const items = [\n        {\n          roleName: 'template', leader: 0, catalog: 1, system: 1, sorting: 0, roleIdParent: 'authenticated',\n        },\n        {\n          roleName: 'system', leader: 0, catalog: 0, system: 1, sorting: 1, roleIdParent: 'template',\n        },\n      ];\n      let needBuild = false;\n      for (const item of items) {\n        const role = await ctx.meta.role.getSystemRole({ roleName: item.roleName });\n        if (!role) {\n          needBuild = true;\n          const roleParent = await ctx.meta.role.getSystemRole({ roleName: item.roleIdParent });\n          const roleId = await ctx.meta.role.add({\n            roleName: item.roleName,\n            leader: item.leader,\n            catalog: item.catalog,\n            system: item.system,\n            sorting: item.sorting,\n            roleIdParent: roleParent.id,\n          });\n          if (item.roleName === 'system') {\n            // superuser include system\n            const roleSuperuser = await ctx.meta.role.getSystemRole({ roleName: 'superuser' });\n            await ctx.meta.role.addRoleInc({ roleId: roleSuperuser.id, roleIdInc: roleId });\n          }\n        }\n      }\n      // build\n      if (needBuild) {\n        await ctx.meta.role.setDirty(true);\n      }\n\n    }\n\n  }\n\n  return VersionInit;\n};\n","module.exports = app => {\n\n  class Base extends app.Service {\n\n    modules() {\n      return this.ctx.meta.base.modules();\n    }\n\n    locales() {\n      return this.ctx.meta.base.locales();\n    }\n\n    atomClasses() {\n      return this.ctx.meta.base.atomClasses();\n    }\n\n    actions() {\n      return this.ctx.meta.base.actions();\n    }\n\n    flags() {\n      return this.ctx.meta.base.flags();\n    }\n\n    orders() {\n      return this.ctx.meta.base.orders();\n    }\n\n    menus() {\n      return this.ctx.meta.base.menus();\n    }\n\n    functions() {\n      return this.ctx.meta.base.functions();\n    }\n\n  }\n\n  return Base;\n};\n","module.exports = app => {\n\n  class User extends app.Service {\n\n    async getLabels({ user }) {\n      const res = await this.ctx.model.label.get({\n        userId: user.id,\n      });\n      return res ? JSON.parse(res.labels) : null;\n    }\n\n    async setLabels({ labels, user }) {\n      const labels2 = JSON.stringify(labels);\n      const res = await this.ctx.model.label.get({\n        userId: user.id,\n      });\n      if (!res) {\n        await this.ctx.model.label.insert({\n          userId: user.id,\n          labels: labels2,\n        });\n      } else {\n        await this.ctx.model.label.update({\n          id: res.id,\n          labels: labels2,\n        });\n      }\n    }\n\n  }\n\n  return User;\n};\n","module.exports = app => {\n\n  class Atom extends app.Service {\n\n    async create({ atomClass, item, user }) {\n      return await this.ctx.meta.atom.create({ atomClass, item, user });\n    }\n\n    async read({ key, user }) {\n      return await this.ctx.meta.atom.read({ key, user });\n    }\n\n    async select({ atomClass, options, user }) {\n      return await this.ctx.meta.atom.select({ atomClass, options, user });\n    }\n\n    async write({ key, item, user }) {\n      return await this.ctx.meta.atom.write({ key, item, user });\n    }\n\n    async delete({ key, user }) {\n      return await this.ctx.meta.atom.delete({ key, user });\n    }\n\n    async action({ action, key, user }) {\n      return await this.ctx.meta.atom.action({ action, key, user });\n    }\n\n    async enable({ key, atom, user }) {\n      return await this.ctx.meta.atom.enable({ key, atom, user });\n    }\n\n    async star({ key, atom, user }) {\n      return await this.ctx.meta.atom.star({ key, atom, user });\n    }\n\n    async readCount({ key, atom, user }) {\n      return await this.ctx.meta.atom.readCount({ key, atom, user });\n    }\n\n    async labels({ key, atom, user }) {\n      return await this.ctx.meta.atom.labels({ key, atom, user });\n    }\n\n    async actions({ key, basic, user }) {\n      return await this.ctx.meta.atom.actions({ key, basic, user });\n    }\n\n    async schema({ atomClass, schema, user }) {\n      return await this.ctx.meta.atom.schema({ atomClass, schema, user });\n    }\n\n    async validator({ atomClass, user }) {\n      return await this.ctx.meta.atom.validator({ atomClass, user });\n    }\n\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n\n  class AtomClass extends app.Service {\n\n    async register({ module, atomClassName, atomClassIdParent }) {\n      return await this.ctx.meta.atomClass.register({ module, atomClassName, atomClassIdParent });\n    }\n\n    async validatorSearch({ atomClass }) {\n      return await this.ctx.meta.atomClass.validatorSearch({ atomClass });\n    }\n\n    async checkRightCreate({ atomClass, user }) {\n      return await this.ctx.meta.atom.checkRightCreate({ atomClass, user });\n    }\n\n  }\n\n  return AtomClass;\n};\n","module.exports = app => {\n\n  class AtomAction extends app.Service {\n\n    async register({ atomClassId, code }) {\n      return await this.ctx.meta.atomAction.register({ atomClassId, code });\n    }\n\n  }\n\n  return AtomAction;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\nconst UserFn = require('../config/middleware/adapter/user.js');\n\nmodule.exports = app => {\n\n  class Auth extends app.Service {\n\n    // register all authProviders\n    async registerAllProviders() {\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.auth && module.main.meta.auth.providers) {\n          for (const providerName in module.main.meta.auth.providers) {\n            await this.registerProviderInstances(module.info.relativeName, providerName);\n          }\n        }\n      }\n    }\n\n    async registerProviderInstances(moduleRelativeName, providerName) {\n      // all instances\n      const instances = await this.ctx.model.query('select * from aInstance a where a.disabled=0');\n      for (const instance of instances) {\n        await this.registerProviderInstance(instance.name, instance.id, moduleRelativeName, providerName);\n      }\n      // config\n      const moduleInfo = mparse.parseInfo(moduleRelativeName);\n      const config = {\n        loginURL: `/api/${moduleInfo.url}/passport/${moduleRelativeName}/${providerName}`,\n        callbackURL: `/api/${moduleInfo.url}/passport/${moduleRelativeName}/${providerName}/callback`,\n      };\n      // authenticate\n      const authenticate = createAuthenticate(moduleRelativeName, providerName, config);\n      // middlewares\n      const middlewaresPost = [];\n      const middlewaresGet = [];\n      if (!this.ctx.app.meta.isTest) middlewaresPost.push('inner');\n      middlewaresPost.push(authenticate);\n      middlewaresGet.push(authenticate);\n      // mount routes\n      const routes = [\n        { name: `get:${config.loginURL}`, method: 'get', path: '/' + config.loginURL, middlewares: middlewaresGet, meta: { auth: { enable: false } } },\n        { name: `post:${config.loginURL}`, method: 'post', path: '/' + config.loginURL, middlewares: middlewaresPost, meta: { auth: { enable: false } } },\n        { name: `get:${config.callbackURL}`, method: 'get', path: '/' + config.callbackURL, middlewares: middlewaresGet, meta: { auth: { enable: false } } },\n        // { name: `post:${config.callbackURL}`, method: 'post', path: '/' + config.callbackURL, middlewares, meta: { auth: { enable: false } } },\n      ];\n      for (const route of routes) {\n        this.app.meta.router.unRegister(route.name);\n        this.app.meta.router.register(moduleInfo, route);\n      }\n    }\n\n    async registerProviderInstance(subdomain, iid, moduleRelativeName, providerName) {\n      // provider of db\n      const user = new (UserFn(this.ctx))();\n      const providerItem = await user.getAuthProvider({\n        subdomain,\n        iid,\n        module: moduleRelativeName,\n        providerName,\n      });\n      if (providerItem && providerItem.disabled === 0) {\n        // module\n        const module = this.app.meta.modules[moduleRelativeName];\n        // provider\n        const provider = module.main.meta.auth.providers[providerName];\n        // config\n        const config = JSON.parse(providerItem.config);\n        config.passReqToCallback = true;\n        config.failWithError = false;\n        // handler\n        const handler = provider.handler(this.app);\n        // install strategy\n        const strategyName = `${iid}:${moduleRelativeName}:${providerName}`;\n        this.app.passport.unuse(strategyName);\n        this.app.passport.use(strategyName, new handler.strategy(config, handler.callback));\n      }\n    }\n\n    async register({ module, providerName }) {\n      return await this.ctx.meta.user.registerAuthProvider({ module, providerName });\n    }\n\n  }\n\n  return Auth;\n};\n\nfunction createAuthenticate(moduleRelativeName, providerName, _config) {\n  return async function(ctx, next) {\n    // provider of db\n    const providerItem = await ctx.meta.user.getAuthProvider({\n      module: moduleRelativeName,\n      providerName,\n    });\n    if (!providerItem || providerItem.disabled !== 0) ctx.throw(423);\n\n    // returnTo\n    if (ctx.url.indexOf(_config.callbackURL) === -1) {\n      if (ctx.request.query && ctx.request.query.returnTo) {\n        ctx.session.returnTo = ctx.request.query.returnTo;\n      } else {\n        delete ctx.session.returnTo; // force to delete\n      }\n    }\n\n    // config\n    const config = JSON.parse(providerItem.config);\n    config.passReqToCallback = true;\n    config.failWithError = false;\n    config.loginURL = ctx.meta.base.getAbsoluteUrl(_config.loginURL);\n    config.callbackURL = ctx.meta.base.getAbsoluteUrl(_config.callbackURL);\n    config.state = ctx.request.query.state;\n\n    // module\n    const module = this.app.meta.modules[moduleRelativeName];\n    // provider\n    const provider = module.main.meta.auth.providers[providerName];\n\n    // config functions\n    if (provider.configFunctions) {\n      for (const key in provider.configFunctions) {\n        config[key] = function(...args) {\n          return provider.configFunctions[key](ctx, ...args);\n        };\n      }\n    }\n\n    // invoke authenticate\n    const strategyName = `${ctx.instance.id}:${moduleRelativeName}:${providerName}`;\n    const authenticate = ctx.app.passport.authenticate(strategyName, config);\n    await authenticate(ctx, next);\n  };\n}\n\n","module.exports = app => {\n\n  class Function extends app.Service {\n\n    async list({ options, user }) {\n      return await this.ctx.meta.function.list({ options, user });\n    }\n\n    async star({ id, star, user }) {\n      return await this.ctx.meta.function.star({ id, star, user });\n    }\n\n    async check({ functions, user }) {\n      return await this.ctx.meta.function.check({ functions, user });\n    }\n\n    async checkLocale({ locale }) {\n      return await this.ctx.meta.function._checkLocale({ locale });\n    }\n\n    async register({ module, name }) {\n      return await this.ctx.meta.function.register({ module, name });\n    }\n\n    async clearLocales() {\n      // clear all instances\n      await this.ctx.model.query('delete from aFunctionLocale');\n    }\n\n  }\n\n  return Function;\n};\n","const require3 = require('require3');\nconst trimHtml = require3('@zhennann/trim-html');\nconst markdown = require3('@zhennann/markdown');\nconst markdonw_it_block = require3('@zhennann/markdown-it-block');\n\nmodule.exports = app => {\n\n  class Comment extends app.Service {\n\n    async list({ key, options, user }) {\n      const _options = {};\n      // where\n      _options.where = options.where || {};\n      _options.where.iid = this.ctx.instance.id;\n      _options.where.deleted = 0;\n      _options.where.atomId = key.atomId;\n      // orders\n      _options.orders = options.orders;\n      // page\n      if (options.page.size !== 0) {\n        _options.limit = options.page.size;\n        _options.offset = options.page.index;\n      }\n      // sql\n      const _where = this.ctx.model._where2(_options.where);\n      const _orders = this.ctx.model._orders(_options.orders);\n      const _limit = this.ctx.model._limit(_options.limit, _options.offset);\n      const sql = `select a.*,(select d2.heart from aCommentHeart d2 where d2.iid=? and d2.commentId=a.id and d2.userId=?) as heart from aViewComment a\n         ${_where} ${_orders} ${_limit}`;\n      // select\n      return await this.ctx.model.query(sql, [ this.ctx.instance.id, user.id ]);\n    }\n\n    async item({ key, data: { commentId }, user }) {\n      const sql = `select a.*,(select d2.heart from aCommentHeart d2 where d2.iid=? and d2.commentId=a.id and d2.userId=?) as heart from aViewComment a\n         where a.iid=? and a.deleted=0 and a.id=?`;\n      // select\n      const list = await this.ctx.model.query(sql,\n        [ this.ctx.instance.id, user.id, this.ctx.instance.id, commentId ]\n      );\n      return list[0];\n    }\n\n    async save({ key, data, user }) {\n      if (!data.commentId) {\n        return await this.save_add({ key, data, user });\n      }\n      return await this.save_edit({ key, data, user });\n    }\n\n    async save_edit({ key, data: { commentId, content }, user }) {\n      // comment\n      const item = await this.ctx.model.commentView.get({ id: commentId });\n      if (key.atomId !== item.atomId || item.userId !== user.id) this.ctx.throw(403);\n      // html\n      const html = this._renderContent({\n        content,\n        replyContent: item.replyContent,\n        replyUserName: item.replyUserName,\n      });\n      // summary\n      const summary = this._trimHtml(html);\n      // update\n      await this.ctx.model.comment.update({\n        id: commentId,\n        content,\n        summary: summary.html,\n        html,\n        updatedAt: new Date(),\n      });\n      // ok\n      return {\n        action: 'update',\n        atomId: key.atomId,\n        commentId,\n      };\n    }\n\n    async save_add({ key, data: { replyId, content }, user }) {\n      // sorting\n      const list = await this.ctx.model.query(\n        'select max(sorting) as sorting from aComment where iid=? and deleted=0 and atomId=?',\n        [ this.ctx.instance.id, key.atomId ]);\n      const sorting = (list[0].sorting || 0) + 1;\n      // reply\n      let reply;\n      if (replyId) {\n        reply = await this.ctx.model.commentView.get({ id: replyId });\n      }\n      // replyContent\n      const replyContent = !reply ? '' :\n        this._fullContent({ content: reply.content, replyContent: reply.replyContent, replyUserName: reply.replyUserName });\n      // html\n      const html = this._renderContent({\n        content,\n        replyContent,\n        replyUserName: reply && reply.userName,\n      });\n      // summary\n      const summary = this._trimHtml(html);\n      // create\n      const res = await this.ctx.model.comment.insert({\n        atomId: key.atomId,\n        userId: user.id,\n        sorting,\n        heartCount: 0,\n        replyId,\n        replyUserId: reply ? reply.userId : 0,\n        replyContent,\n        content,\n        summary: summary.html,\n        html,\n      });\n      // commentCount\n      await this.ctx.meta.atom.comment({ key, atom: { comment: 1 }, user });\n      // ok\n      return {\n        action: 'create',\n        atomId: key.atomId,\n        commentId: res.insertId,\n      };\n    }\n\n    async delete({ key, data: { commentId }, user }) {\n      // comment\n      const item = await this.ctx.model.comment.get({ id: commentId });\n      if (key.atomId !== item.atomId || item.userId !== user.id) this.ctx.throw(403);\n      // delete hearts\n      await this.ctx.model.commentHeart.delete({ commentId });\n      // delete comment\n      await this.ctx.model.comment.delete({ id: commentId });\n      // commentCount\n      await this.ctx.meta.atom.comment({ key, atom: { comment: -1 }, user });\n      // ok\n      return {\n        action: 'delete',\n        atomId: key.atomId,\n        commentId,\n      };\n    }\n\n    async heart({ key, data: { commentId, heart }, user }) {\n      let diff = 0;\n      // check if exists\n      const _heart = await this.ctx.model.commentHeart.get({\n        userId: user.id,\n        atomId: key.atomId,\n        commentId,\n      });\n      if (_heart && !heart) {\n        diff = -1;\n        // delete\n        await this.ctx.model.commentHeart.delete({\n          id: _heart.id,\n        });\n      } else if (!_heart && heart) {\n        diff = 1;\n        // new\n        await this.ctx.model.commentHeart.insert({\n          userId: user.id,\n          atomId: key.atomId,\n          commentId,\n          heart: 1,\n        });\n      }\n      // get\n      const item = await this.ctx.model.comment.get({ id: commentId });\n      let heartCount = item.heartCount;\n      if (diff !== 0) {\n        heartCount += diff;\n        await this.ctx.model.comment.update({\n          id: commentId,\n          heartCount,\n        });\n      }\n      // ok\n      return {\n        action: 'heart',\n        atomId: key.atomId,\n        commentId,\n        heart, heartCount,\n      };\n    }\n\n    _fullContent({ content, replyContent, replyUserName }) {\n      if (!replyContent) return content;\n      return `${content}\n\n> \\`${replyUserName}\\`:\n\n::: comment-quot\n${replyContent}\n:::\n\n`;\n    }\n\n    _renderContent({ content, replyContent, replyUserName }) {\n      const _content = this._fullContent({ content, replyContent, replyUserName });\n      const md = markdown.create();\n      // block options\n      const blockOptions = {\n        utils: {\n          text: (...args) => {\n            return this.ctx.text(...args);\n          },\n        },\n      };\n      md.use(markdonw_it_block, blockOptions);\n      // render\n      return md.render(_content);\n    }\n\n    _trimHtml(html) {\n      return trimHtml(html, this.ctx.config.comment.trim);\n    }\n\n  }\n\n  return Comment;\n};\n","const atom = require('./model/atom.js');\nconst atomAction = require('./model/atomAction.js');\nconst atomClass = require('./model/atomClass.js');\nconst auth = require('./model/auth.js');\nconst authProvider = require('./model/authProvider.js');\nconst role = require('./model/role.js');\nconst roleInc = require('./model/roleInc.js');\nconst roleIncRef = require('./model/roleIncRef.js');\nconst roleRef = require('./model/roleRef.js');\nconst roleRight = require('./model/roleRight.js');\nconst roleRightRef = require('./model/roleRightRef.js');\nconst user = require('./model/user.js');\nconst userAgent = require('./model/userAgent.js');\nconst userRole = require('./model/userRole.js');\nconst label = require('./model/label.js');\nconst atomLabel = require('./model/atomLabel.js');\nconst atomLabelRef = require('./model/atomLabelRef.js');\nconst atomStar = require('./model/atomStar.js');\nconst func = require('./model/function.js');\nconst functionStar = require('./model/functionStar.js');\nconst functionLocale = require('./model/functionLocale.js');\nconst roleFunction = require('./model/roleFunction.js');\nconst comment = require('./model/comment.js');\nconst commentView = require('./model/commentView.js');\nconst commentHeart = require('./model/commentHeart.js');\n\nmodule.exports = app => {\n  const models = {\n    atom,\n    atomAction,\n    atomClass,\n    auth,\n    authProvider,\n    role,\n    roleInc,\n    roleIncRef,\n    roleRef,\n    roleRight,\n    roleRightRef,\n    user,\n    userAgent,\n    userRole,\n    label,\n    atomLabel,\n    atomLabelRef,\n    atomStar,\n    function: func,\n    functionStar,\n    functionLocale,\n    roleFunction,\n    comment,\n    commentView,\n    commentHeart,\n  };\n  return models;\n};\n","module.exports = app => {\n\n  class RoleIncRef extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleIncRef', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return RoleIncRef;\n};\n","module.exports = app => {\n\n  class RoleRef extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleRef', options: { disableDeleted: true } });\n    }\n\n    async getParent({ roleId, level = 1 }) {\n      const roleRef = await this.get({\n        roleId,\n        level,\n      });\n      return roleRef;\n    }\n\n  }\n\n  return RoleRef;\n};\n","module.exports = app => {\n\n  class Label extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aLabel', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return Label;\n};\n","module.exports = app => {\n\n  class Comment extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aComment', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Comment;\n};\n","module.exports = app => {\n\n  class CommentView extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aViewComment', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return CommentView;\n};\n","module.exports = app => {\n\n  class CommentHeart extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'aCommentHeart', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return CommentHeart;\n};\n","module.exports = app => {\n  // keywords\n  const keywords = require('./config/validation/keywords.js')(app);\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // meta\n  const meta = {\n    base: {\n      functions: {\n        listComment: {\n          title: 'Comment List',\n          scene: 'list',\n          sorting: 1,\n          menu: 1,\n          actionPath: 'comment/all',\n        },\n      },\n    },\n    sequence: {\n      providers: {\n        draft: {\n          start: 0,\n          expression({ ctx, value }) {\n            return ++value;\n          },\n        },\n        userName: {\n          start: 0,\n          expression({ ctx, value }) {\n            return ++value;\n          },\n        },\n      },\n    },\n    validation: {\n      validators: {\n        user: {\n          schemas: 'user',\n        },\n      },\n      keywords: {\n        'x-exists': keywords.exists,\n      },\n      schemas: {\n        user: schemas.user,\n      },\n    },\n    event: {\n      declarations: {\n        loginInfo: 'Login Info',\n        userVerify: 'User Verify',\n        atomClassValidator: 'Atom Validator',\n      },\n    },\n  };\n  return meta;\n};\n","const require3 = require('require3');\nconst Ajv = require3('ajv');\n\nmodule.exports = app => {\n  const keywords = {};\n  keywords.exists = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function(data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.meta.user.exists({ [name]: data });\n        if (res && res.id !== ctx.user.agent.id) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Element exists') }];\n          throw new Ajv.ValidationError(errors);\n        }\n        if (!res && data.indexOf('__') > -1) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Cannot contain __') }];\n          throw new Ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const schemas = {};\n  // user\n  schemas.user = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n        'x-exists': true,\n        ebReadOnly: true,\n      },\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n        notEmpty: true,\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        // notEmpty: true,\n        // format: 'email',\n        'x-exists': true,\n        ebReadOnly: true,\n      },\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Mobile',\n        // notEmpty: true,\n        'x-exists': true,\n        ebReadOnly: true,\n      },\n      motto: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Motto',\n      },\n      locale: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Locale',\n        ebOptionsUrl: '/a/base/base/locales',\n        ebOptionsUrlParams: null,\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n\n  return schemas;\n};\n"],"sourceRoot":""}